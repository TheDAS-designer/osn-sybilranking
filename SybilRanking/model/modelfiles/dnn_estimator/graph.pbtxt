node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "global_step/cond/Switch"
  op: "Switch"
  input: "global_step/IsVariableInitialized"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_t"
  op: "Identity"
  input: "global_step/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/switch_f"
  op: "Identity"
  input: "global_step/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/pred_id"
  op: "Identity"
  input: "global_step/IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read"
  op: "Identity"
  input: "global_step/cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "global_step/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/cond/Merge"
  op: "Merge"
  input: "global_step/cond/Switch_1"
  input: "global_step/cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step/add"
  op: "Add"
  input: "global_step/cond/Merge"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "tensors/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1192
          }
        }
        tensor_content: "UUUUUU\375?\000\000\000\000\000\000\320?\000\000\000\000\000\200,@\253\252\252\252\252\252\372?UUUUUU\305?UUUUU\325$@\315\314\314\314\314\314\004@UUUUUU\325?UUUUUU\365?\000\000\000\000\000\000\000\000\000\000\000\000\000@3@UUUUUU\371?UUUUUU\305?\254\252\252\252\252j;@\000\000\000\000\000\0001@\000\000\000\000\000\000\026@\253\252\252\252\252\252\023@\000\000\000\000\000\000\370?UUUUUU\305?\266m\333\266m\333\034@TUUUUU,@\321E\027]t\3211@\000\000\000\000\000\200\\@\000\000\000\000\000\000%@\000\000\000\000\000\000\340?\000\000\000\000\000\000\021@O\354\304N\354DA@\000\000\000\000\000\000\004@\000\000\000\000\000\000\024@\000\000\000\000\000\000\025@\000\000\000\000\000\000\025@wwwwww4@\254\252\252\252\252\252\033@\000\000\000\000\000\000\023@\000\000\000\000\000\2001@\000\000\000\000\000\000\004@\254\252\252\252\252\252(@\000\000\000\000\000\000\360?\000\000\000\000\000\000\320?\254\252\252\252\252\2527@\252\252\252\252\252\252\010@UUUUUU\265?\000\000\000\000\000\200!@UUUUU\325#@\254\252\252\252\252\252\034@\000\000\000\000\000\000\026@TUUUU\325*@\000\000\000\000\000\000\000\000TUUUUU\027@\000\000\000\000\000\000\035@\000\000\000\000\000\000\020@UUUUUU\003@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\252\252\252\252\252\332?\253\252\252\252\252\252\016@\000\000\000\000\000\000(@\000\000\000\000\000\000$@\254\252\252\252\252\252\026@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\370?\254\252\252\252\252\252\032@\000\000\000\000\000\000\006@\253\252\252\252\252\252\022@\321E\027]t\321\365?UUUUUU\022@UUUUUU#@\000\000\000\000\000\000\340?\253\252\252\252\252\252\342?\000\000\000\000\000\000\000@\000\000\000\000\000\000\006@UUUUUU\371?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360\277\000\000\000\000\000\000\"@UUUUUU\005@\000\000\000\000\000\000\010@\252\252\252\252\252\252\014@UUUUUU\355?\000\000\000\000\000\000\000\000b\'vb\'v$@\000\000\000\000\000\000 @\252\252\252\252\252\252\010@UUUUUU\003@\253\252\252\252\252\252\022@\253\252\252\252\252\252\352?\254\252\252\252\252\252\025@UUUUUU\371?\000\000\000\000\000`G@\254\252\252\252\252\032X@\253\252\252\252\252\352d@UUUUUU\375?\000\000\000\000\000\000\020@\252\252\252\252\252\252\004@\222$I\222$I\"@\000\000\000\000\000\200$@\000\000\000\000\000\000\004@UUUUUU\021@UUUUUU\265?\000\000\000\000\000\000\360?\000\000\000\000\000\0008@\000\000\000\000\000\000\364?\253\252\252\252\252\252\366?UUUUUU\t@UUUUUU%@\000\000\000\000\000\000\364?\252\252\252\252\252\252\004@UUUUUU\020@\253\252\252\252\252\252\332?\254\252\252\252\252\252\036@\000\000\000\000\000\000\370?\253\252\252\252\252\252\332?\3448\216\3438\216/@\253\252\252\252\252\252\342?\000\000\000\000\000\000)@TUUUUU\032@\000\000\000\000\000\000\000\000UUUUUU#@\000\000\000\000\000\000*@DDDDDD\020@\000\000\000\000\000\000\360?\023;\261\023;\2618@\254\252\252\252\252\252\035@\253\252\252\252\252\252\376?\000\000\000\000\000\000\025@\000\000\000\000\000\000\002@\253\252\252\252\252\252\020@UUUUUU\265?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\300<@\000\000\000\000\000\200#@\000\000\000\000\000\0005@UUUUUU!@\253\252\252\252\252\252\362?\000\000\000\000\000\240K@TUUUU\2252@\000\000\000\000\000\000\374?\000\000\000\000\000\000\021@\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\253\252\252\252\252J@@\253\252\252\252\252*!@\254\252\252\252\252\252&@\254\252\252\252\252\252.@\000\000\000\000\000\000\370?\000\000\000\000\000\000\036@UUUUUU\361?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200!@\000\000\000\000\000\0004@\034\307q\034\307q\314?\000\000\000\000\000\000\370?\000\000\000\000\000\000\340?\253\252\252\252\252\252\016@ffffffq\034\307q\034!@\000\000\000\000\000\000\320?UUUUUU\013@\253\252\252\252\252\nB@\000\000\000\000\000\000\n@UUUUUU\325?\000\000\000\000\000\000\000\000\315\314\314\314\314\314A@\000\000\000\000\000\000\000@\253\252\252\252\252\252\021@UUUUUU\013@TUUUU\325,@\000\000\000\000\000@4@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\350?\000\000\000\000\000\000,@\000\000\000\000\000\000\360\277\252\252\252\252\252\252\002@UUUUUU\003@\245\245\245\245\245\245H@\252\252\252\252\252\252\002@\000\000\000\000\000\000\024@TUUUU\2253@UUUUUU\007@\252\252\252\252\252\252\000@\000\000\000\000\000\000\000\000UUUUUU\345?UUUUUU\345?\252\252\252\252\252\252\000@\252\252\252\252\252\252\006@333333!@UUUUUU\265?UUUUUU\361?\254\252\252\252\252\252)@\000\000\000\000\000\000*@\315\314\314\314\314\314,@\000\000\000\000\000\000\000\000\000\000\000\000\000\000-@\000\000\000\000\000\000\320?\253\252\252\252\252j1@\000\000\000\000\000\000\006@\000\000\000\000\000\000%@UUUUUU\361?\253\252\252\252\252*$@\254\252\252\252\252\252\032@\000\000\000\000\000\000\374?\000\000\000\000\000\000\340?TUUUUU/@\000\000\000\000\000\3009@\000\000\000\000\000\000\027@\333\266m\333\266m\003@\254\252\252\252\252\252\037@\253\252\252\252\252\252\372?\222$I\222$I\362?UUUUUU\325?UUUUUU\375?UUUUUU\345?\254\252\252\252\252\252(@UUUUUU\305?\252\252\252\252\252\252\n@\000\000\000\000\000\000\000\000\000\000\000\000\000\200(@UUUUUU\355?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\'@\254\252\252\252\252j;@\254\252\252\252\252\252\025@\000\000\000\000\000\000!@TUUUU\325(@\000\000\000\000\000\000\000\000UUUUUU\365?\000\000\000\000\000\200%@TUUUUU2@\000\000\000\000\000\000\036@\254\252\252\252\252\252*@\253\252\252\252\252\252\352?\000\000\000\000\000\000\000\000\261\023;\261\023;\t@\000\000\000\000\000\000\022@\253\252\252\252\252*1@UUUUUU\021@\000\000\000\000\000\000X@\000\000\000\000\000\000\350?\253\252\252\252\252\252\362?UUUUUU%@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000TUUUUU<@\000\000\000\000\000\000(@\266m\333\266m\333\nn\333\266m\333\266\021@UUUUUU\355?\000\000\000\000\000\000\026@TUUUU\325*@UUUUUU\375?333333\037@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@TUUUU\225U@UUUUUU\265?\252\252\252\252\252\252\002@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\252\252\252\252\252\252\010@\253\252\252\252\252\252\376?\000\000\000\000\000\000\010@UUUUUU\020@\000\000\000\000\000\000\000\000333333\033@UUUUUU\025@\000\000\000\000\000\000\002@UUUUUU\003@\253\252\252\252\252\252\376?\000\000\000\000\000\000\360\277]t\321E\027]\024@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\320?I\222$I\222\244S@\000\000\000\000\000\000\034@\000\000\000\000\000\000\360\277\000\000\000\000\000\2003@UUUUUU\361?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000@2@E\027]tk(\257\241.@\254\252\252\252\252\252\026@\000\000\000\000\000\000\004@\254\252\252\252\252\2529@\254\252\252\252\252\252\'@\000\000\000\000\000\000\320?\254\252\252\252\252*-@\000\000\000\000\000\200(@UUUUU\325$@ffffff\022@\000\000\000\000\000\0006@\253\252\252\252\252\252\021@\000\000\000\000\000\000\010@\253\252\252\252\252\252\372?\254\252\252\252\252\252\036@\253\252\252\252\252\252\016@UUUUUU\021@\254\252\252\252\252\252%@\252\252\252\252\252\252\000@\253\252\252\252\252\022d@UUUUUU\345?\253\252\252\252\252\3524@UUUUUU1@\000\000\000\000\000\000\026@\222$I\222$I\016@\000\000\000\000\000\000(@UUUUUU\365?\000\000\000\000\000\000\004@TUUUUU(@\025;\261\023;1E@UUUUUU\365?\315\314\314\314\314\314$@\000\000\000\000\000\000\004@\252\252\252\252\252\252\004@\000\000\000\000\000\000\364?\000\000\000\000\000\000\000\000TUUUUU\030@UUUUUU\001@UUUUUU\365?UUUUUU\005@TUUUUU5@\000\000\000\000\000\000\000\000\000\000\000\000\000\200+@\000\000\000\000\000\000\037@\000\000\000\000\000\000\026@\321E\027]t\321\005@\254\252\252\252\252:[@\000\000\000\000\000\000\360?UUUUUU\265?\353\304N\354\304N,@UUUUUU\361?UUUUUU\017@TUUUUU-@\000\000\000\000\000\000\340?\000\000\000\000\000\000\370?fffffffffff\346F@\000\000\000\000\000\000\000@\000\000\000\000\000\000\025@\000\000\000\000\000\000\340?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H@\253\252\252\252\252\252!@UUUUUU\355?TUUUUU*@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\034@UUUUUU\365?TUUUU\325%@UUUUUU\013@\253\252\252\252\252\252\362?\000\000\000\000\000\2000@\253\252\252\252\252\252\342?\000\000\000\000\000\240D@\253\252\252\252\252\252\362?UUUUUU\345?Cy\r\3455\224\023@UUUUUU\023@\232\231\231\231\231\231\371?\000\000\000\000\000\000\014@\254\252\252\252\252\252\031@\254\252\252\252\252\252\'@\254\252\252\252\252\252\034@TUUUU\3256@\000\000\000\000\000\000\035@\000\000\000\000\000\000\000@\000\000\000\000\000\0000@UUUUUU\005@\000\000\000\000\000\000\000\000UUUUUU\345?TUUUUuL@UUUUUU\345?ffffffjC@\000\000\000\000\000\000\020@\000\000\000\000\000\0002@\000\000\000\000\000\000\000\000UUUUUU!@\000\000\000\000\000\000\340?\232\231\231\231\231\231\311?\000\000\000\000\000\000\370?\253\252\252\252\252\252\332?\253\252\252\252\252\252\024@UUUUUU\001@UUUUUU\375?\000\000\000\000\000\000\320?\000\000\000\000\000\240E@\254\252\252\252\252\252\032@TUUUU\0258@\000\000\000\000\000\000\036@TUUUU\325,@\000\000\000\000\000\000\000\000\315\314\314\314\314\314\024@\000\000\000\000\000\000\320?\000\000\000\000\000\000\n@\000\000\000\000\000\000\026@UUUUUU\355?UUUUUU\007@\000\000\000\000\000\000\020@\034\307q\034\307q\020@\000\000\000\000\000\000\000\000UUUUUU\003@UUUUUU\345?\334\266m\333\266m\027@\000\000\000\000\000\000\033@\253\252\252\252\252\252\332?UUUUUU\345?\000\000\000\000\000\000\340?\000\000\000\000\000\000\360\277TUUUUU\033@\253\252\252\252\252\252\366?\253\252\252\252\252\252\342?\000\000\000\000\000\000\000\000TUUUUU\033@\254\252\252\252\252\252%@\000\000\000\000\000\000\000\000TUUUU\325/@\000\000\000\000\000\000\000@\000\000\000\000\000\000\034@\253\252\252\252\252\2521@UUUUU%R@\253\252\252\252\252\252\332?\333\266m\333\266m\333?\000\000\000\000\000\300a@\000\000\000\000\000\000\010@UUUUUU\325?\000\000\000\000\000\000\370?UUUUUU\305?\000\000\000\000\000\300<@\000\000\000\000\000\000\027@\000\000\000\000\000\000\002@\000\000\000\000\000\000C@UUUUUU\rm\333\266\355Z@\000\000\000\000\000\000\020@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\374?\000\000\000\000\000\000\360?\000\000\000\000\000\000\020@\000\000\000\000\000\3002@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252\252\252\252\252\252\n@\000\000\000\000\000\000\027@\253\252\252\252\252\252\332?\000\000\000\000\000\000\000\000\237\330\211\235\330\211\355?UUUUUU\005@\252\252\252\252\252\252\014@UUUUUU$@\000\000\000\000\000@7@\000\000\000\000\000\000\000\000ffffff\016@UUUUUU\325?\000\000\000\000\000\3001@UUUUUU\003@\000\000\000\000\000@1@\000\000\000\000\000\000\034@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\252\252\252\252\252\024@TUUUU\325\'@\252\252\252\252\252\252\014@\000\000\000\000\000\000\340?\000\000\000\000\000\000\006@\253\252\252\252\252\252\362?\000\000\000\000\000@0@\000\000\000\000\000\000\360?\000\000\000\000\000\000\000\000\253\252\252\252\252\252\332?TUUUU\325%@\000\000\000\000\000\000\000\000\266m\333\266muD@\000\000\000\000\000\000\"@\000\000\000\000\000\000\000\000\252\252\252\252\252\252\010@\000\000\000\000\000\000\370?\000\000\000\000\000\000\024@\000\000\000\000\000\000\000\000/\272\350\242\213.2@\254\252\252\252\252\252\032@\232\231\231\231\231\231\021@\254\252\252\252\252\252\037@\000\000\000\000\000\000\370?\253\252\252\252\252\252\352?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\252\252\252\252\252\366?\000\000\000\000\000\000\374?\000\000\000\000\000\000\000\000UUUUUU\345?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000TUUUU\2254@\000\000\000\000\000\000\020@UUUUUU\371?\000\000\000\000\000\000\360?UUUUUU\005@\253\252\252\252\252\252\021@\000\000\000\000\000\000(@\253\252\252\252\252jA@UUUUUU\013@UUUUUU#@TUUUUU\031@\000\000\000\000\000\000\360?\000\000\000\000\000\000\360?\253\252\252\252\252\252\372?UUUUUU\024@UUUUUU\371?UUUUUU\325?\000\000\000\000\000\000\000\000UUUUUU\361?TUUUUU\031@TUUUU5E@\000\000\000\000\000\000\000\000\252\252\252\252\252\252\010@TUUUUU\031@\315\314\314\314\314La@\000\000\000\000\000\000\350?UUUUUU\265?\253\252\252\252\252\252\016@\253\252\252\252\252\252\022@\253\252\252\252\252\252\022@\000\000\000\000\000\000\020@\000\000\000\000\000\000\026@\000\000\000\000\000\200\'@\253\252\252\252\252\252\372?\222$I\222$I\n@\253\252\252\252\252\252\372?UUUUUU @\000\000\000\000\000\000\000\000\254\252\252\252\252\372_@\000\000\000\000\000\000\021@UUUUUU\007@\000\000\000\000\000\000\020@\253\252\252\252\252\252\362?UUUUUU\305?UUUUUU\022@UUUUUU\005@\213\235\330\211\235\330\'@\253\252\252\252\252\252\020@\253\252\252\252\252j0@\253\252\252\252\252\252\352?UUUUUU\361?\253\252\252\252\252\252\016@TUUUUU\037@\254\252\252\252\252\252\032@\000\000\000\000\000\000\022@UUUUUU\365?UUUUUU#@\000\000\000\000\000\000\000\000\253\252\252\252\252\252\352?\000\000\000\000\000\000\027@\253\252\252\252\252\252\023@\000\000\000\000\000\000\360\277\254\252\252\252\252\252\037@\030\206a\030\206a\000@\000\000\000\000\000\000\000\000\252\252\252\252\252\252\014@\000\000\000\000\000\000\000@\000\000\000\000\000\000*@\253\252\252\252\252\252\352?\000\000\000\000\000\000\000@UUUUUU!@\321E\027]tq\034\307q\034\023@%I\222$I\222\020@\000\000\000\000\000\000\360?\000\000\000\000\000\000&@\000\000\000\000\000\000\006@\334\266m\333\266\3556@UUUUUU\371?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\004@\000\000\000\000\000\000$@\000\000\000\000\000\000\024@\000\000\000\000\000\000o@\000\000\000\000\000\000\360?UUUUUU\022@\000\000\000\000\000\000\037@UUUUUU\365?\253\252\252\252\252*E@UUUUUU\rt\321E\027]3@\000\000\000\000\000\000\024@\000\000\000\000\000\2007@UUUUUU\025@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000UUUUUU\355?UUUUUU\345?\253\252\252\252\252\252\372?UUUUUU\r@\000\000\000\000\000\000\024@UUUUUU\365?\000\000\000\000\000\000\000\000ffffff\366?ffffff\366?\000\000\000\000\000\000)@\000\000\000\000\000\000\033@\000\000\000\000\000\000\320?UUUUUU\024@\253\252\252\252\252\252\021@\000\000\000\000\000\000\010@\000\000\000\000\000\000\000\000\000\000\000\000\000\300D@UUUUUUQ@UUUUUU\365?\000\000\000\000\000\000\000@\252\252\252\252\252\252\n@\254\252\252\252\252\252*@\254\252\252\252\252\252\030@\000\000\000\000\000\000,@\253\252\252\252\252\252\332?\000\000\000\000\000\000\000\000UUUUUU\003@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022@\000\000\000\000\000\000\000\000TUUUUU\034@TUUUUU\035@\315\314\314\314\314\314\014@UUUUUU\007@\000\000\000\000\000\000\000\000UUUUUU\005@\252\252\252\252\252\252\010@\000\000\000\000\000\000\000\000a\'vb\'v\362?\252\252\252\252\252\252\002@UUUUUU\013@\000\000\000\000\000\000\006@\253\252\252\252\252\252\366?\000\000\000\000\000\200!@\000\000\000\000\000\000\021@\000\000\000\000\000\000\000@\000\000\000\000\000\000\360?UUUUUU\325?TUUUUU\034@UUUUUU\007@UUUUUU\375?TUUUU\325.@UUUUUU\013@\000\000\000\000\000\000\350?\000\000\000\000\000\000\340?\000\000\000\000\000\2001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360?UUUUUU\265?\000\000\000\000\000\000\000\000\254\252\252\252\252*6@\000\000\000\000\000\000\340?\253\252\252\252\252\252\376?\253\252\252\252\252*5@TUUUUU;@\000\000\000\000\000\340\\@UUUUUU\022@\000\000\000\000\000\000\000\000UUUUU\325$@\000\000\000\000\000\000\000\000\000\000\000\000\000\000 @TUUUU\325-@\000\000\000\000\000\000\000\000UUUUUU\361?UUUUU\325A@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\254\252\252\252\252\252(@\000\000\000\000\000\000\000\000UUUUUU\003@\253\252\252\252\252\252\342?\000\000\000\000\000\000\370?\000\000\000\000\000\000,@\000\000\000\000\000\000\n@UUUUUU\325?\334\266m\333\266mr@\253\252\252\252\252\252\372?\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\030@\000\000\000\000\000\3004@\232\231\231\231\231\231+@UUUUUM`@UUUUUU\013@\000\000\000\000\000\000\006@\253\252\252\252\252\252\376?\000\000\000\000\000\000\025@\000\000\000\000\000\0002@UUUUUU\001@\000\000\000\000\000\000\000\000UUUUUU\t@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@UUUUUU\355?UUUUUU\375?\000\000\000\000\000\000\360?UUUUUU\361?\000\000\000\000\000\200\'@TUUUUU;@\254\252\252\252\252*\'@\000\000\000\000\000\000\014@\253\252\252\252\252\252\016@\000\000\000\000\000\000\000\000\252\252\252\252\252\252\000@\000\000\000\000\000\000\000\000UUUUUU\r
      }
    }
  }
}
node {
  name: "tensors/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_DOUBLE
        tensor_shape {
          dim {
            size: 1192
          }
        }
        tensor_content: "UUUUU\315`@\254\252\252\252\252\252\'@\000\000\000\000\000\240v@\253\252\252\252\252\252!@\253\252\252\252\252*1@TUUUU\023\215@\337\335\335\335\335\335W@\253\252\252\252\252jA@\254\252\252\252\252\212G@\000\000\000\000\000\000\000\000\252\252\252\252\2522g@\254\252\252\252\252\252=@UUUUU\325 @UUUUU\235\221@n\333\266m\3336^@\000\000\000\000\0008n@TUUUUuC@\254\252\252\252\252\252+@\000\000\000\000\000\200?@\000\000\000\000\000\000>@\000\000\000\000\000\340j@\027]t\321E\367c@\252\252\252\252\252F\253@\253\252\252\252\252*`@\000\000\000\000\000\200:@\000\000\000\000\000\340E@\305N\354\304N \221@UUUUU\305S@\254\252\252\252\252\272X@TUUUUUO@UUUUU\255`@UUUUUm\201@\000\000\000\000\000`N@TUUUU\225O@\000\000\000\000\000\330u@\000\000\000\000\000\0006@UUUUU\005Q@TUUUU5E@\000\000\000\000\000\000/@\000\000\000\000\000\240d@TUUUU\345U@\000\000\000\000\000\240G@\000\000\000\000\000pS@\254\252\252\252\252\032X@\000\000\000\000\000 ]@\000\000\000\000\000\240W@\253\252\252\252\252JT@\000\000\000\000\000\000\000\000TUUUU\r\177@TUUUU\225m@\000\000\000\000\000pP@\000\000\000\000\000\240R@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\200T@\254\252\252\252\252\252?@\000\000\000\000\000\200G@b\'vb\'\376\203@\252\252\252\252\252\262i@\253\252\252\252\252*\"@\000\000\000\000\000\0002@\000\000\000\000\000\200]@TUUUUUD@\000\000\000\000\000@Z@F\027]t\321EP@\253\252\252\252\252Jb@\252\252\252\252\252\322k@\253\252\252\252\252*@@TUUUU\215i@\254\252\252\252\252\212X@\254\252\252\252\252\312F@UUUUU%T@\000\000\000\000\000\000\000\000\000\000\000\000\000\360h@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360\277\000\000\000\000\000\340c@\000\000\000\000\000@C@\000\000\000\000\000\3003@\253\252\252\252\252\032S@\254\252\252\252\252\3525@\000\000\000\000\000\000\000\000\236\330\211\235\330\321\201@fffff&P@\254\252\252\252\252j=@\253\252\252\252\252\352@@\254\252\252\252\252\312X@\254\252\252\252\252jN@\000\000\000\000\000\240R@\000\000\000\000\000\000>@\254\252\252\252\252\226u@\252\252\252\252\252\"\245@TUUUUO\215@\253\252\252\252\252*d@\000\000\000\000\000\000\"@TUUUU%i@n\333\266m\333.\211@\253\252\252\252\252d\202@TUUUU\225I@\253\252\252\252\252jS@\000\000\000\000\000\3009@\334\266m\333\266m\033@\253\252\252\252\252\352\200@TUUUU\365C@UUUUU\325$@\000\000\000\000\000PU@\254\252\252\252\252*[@\254\252\252\252\252\212E@UUUUUeP@TUUUU\305V@UUUUUUA@\000\000\000\000\000\000K@\000\000\000\000\000Xc@TUUUU\225>@\035\307q\034\307\341v@TUUUU\0255@UUUUU\241p@\254\252\252\252\252\320\212@UUUUU\225c@\253\252\252\252\252\232`@\253\252\252\252\252ba@fffff\246T@TUUUU\325:@b\'vb\'\256\202@\000\000\000\000\000Z\202@\254\252\252\252\252j:@\254\252\252\252\252\352_@TUUUU\275e@\000\000\000\000\000@8@\253\252\252\252\252\252\021@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\252\252\252\252Jp@\000\000\000\000\000pd@fffff>\210@\000\000\000\000\000\354\207@\000\000\000\000\000`B@\253\252\252\252\252\036s@\252\252\252\252\252\"j@\000\000\000\000\000`\\@TUUUUU]@\215\3438\216\34385@\000\000\000\000\000\000\000\000TUUUUqv@TUUUU\325]@UUUUU}s@\254\252\252\252\252\n]@\000\000\000\000\000\340B@\000\000\000\000\000 I@TUUUU5C@\000\000\000\000\000\000\000\000\254\252\252\252\252\272\\@\000\000\000\000\000\200Q@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000UUUUU\345P@UUUUU\305t@\253\252\252\252\252\2520@\000\000\000\000\000@6@\000\000\000\000\000\000%@\000\000\000\000\000`E@\315\314\314\314\314\314G@TUUUU\007\211@\000\000\000\000\000\360U@\000\000\000\000\000\250d@TUUUUuL@\000\000\000\000\000\000\000\000\254\252\252\252\252\352>@\000\000\000\000\000\000\016@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\252\252\252\252\252Jj@\000\000\000\000\000`F@\000\000\000\000\000`A@\000\000\000\000\000\310b@\000\000\000\000\000\3007@\253\252\252\252\252\nb@\000\000\000\000\000`s@\000\000\000\000\000\000\000\000UUUUU\325a@\000\000\000\000\000\300A@\000\000\000\000\000\300S@\252\252\252\252\252\242k@\253\252\252\252\252T\205@TUUUU\271\177@\000\000\000\000\000\000:@\000\000\000\000\000xd@\000\000\000\000\000\000\000\000TUUUU\325N@\000\000\000\000\000\000\000\000\253\252\252\252\252\232R@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\252\252\252\252\372`@\253\252\252\252\252\nE@\000\000\000\000\000\000\000\000UUUUUip@TUUUU\325G@UUUUU\325a@\000\000\000\000\000@P@\254\252\252\252\252\nI@\307q\034\307q\\^@\000\000\000\000\000\2003@\000\000\000\000\000Pd@TUUUU\335f@\254\252\252\252\252\212]@TUUUUUO@\000\000\000\000\000\000\000\000\000\000\000\000\000@x@n\333\266m\333\266F@\000\000\000\000\000\300T@\253\252\252\252\252Ra@\253\252\252\252\252\252`@\000\000\000\000\000\\b@\000\000\000\000\000\000\000\000\000\000\000\000\000\340j@\000\000\000\000\000\0002@\000\000\000\000\000\000\360\277\000\000\000\000\000\0009@\252\252\252\252\252Jg@\017\017\017\017\017\245\247@\253\252\252\252\252\270\200@\000\000\000\000\000`@@\000\000\000\000\000`g@\000\000\000\000\000pe@TUUUU\325.@\000\000\000\000\000\000\000\000UUUUU\225Q@\000\000\000\000\000\300>@\253\252\252\252\252\312B@UUUUUUU@\315\314\314\314\314\354Q@UUUUUU#@\000\000\000\000\000\2001@\252\252\252\252\252\332j@\000\000\000\000\000\240Q@33333sW@\000\000\000\000\000\000\000\000\000\000\000\000\000@[@TUUUU\3253@\254\252\252\252\252\252L@\000\000\000\000\000pR@UUUUUUd@TUUUU\225B@\253\252\252\252\252\262d@\000\000\000\000\000@g@\000\000\000\000\000\2001@\254\252\252\252\252*9@\000\000\000\000\000hm@\000\000\000\000\000\214v@\254\252\252\252\252\312J@\333\266m\333\266m0@\252\252\252\252\252\272j@UUUUU\025@@n\333\266m\333\2665@\000\000\000\000\000\0006@\000\000\000\000\000`G@\254\252\252\252\252\nO@TUUUU\305_@\253\252\252\252\252\252\023@UUUUU\205P@\000\000\000\000\000\000\000\000\000\000\000\000\000\324v@\000\000\000\000\000\0003@\000\000\000\000\000\000\000\000\000\000\000\000\000\350`@\254\252\252\252\252\312e@TUUUU\325K@TUUUU\265\\@\253\252\252\252\252\312D@\000\000\000\000\000\000\330?s\034\307q\034\3073@\000\000\000\000\000\330\177@UUUUU1r@\253\252\252\252\252\376r@TUUUU\335l@\000\000\000\000\000\3008@\000\000\000\000\000\000\000\000&vb\'v\242\\@\254\252\252\252\252*K@\254\252\252\252\252\272u@\000\000\000\000\000\200M@\000\000\000\000\000\000\232@\254\252\252\252\252\312F@\000\000\000\000\000\340E@TUUUU\265^@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\320Q@\000\000\000\000\000\200I@n\333\266m\333\266b@\000\000\000\000\000(a@\253\252\252\252\252\272b@TUUUU\0254@\000\000\000\000\000\010c@\253\252\252\252\252\302r@\000\000\000\000\000\320[@\253\252\252\252\252jd@\000\000\000\000\000\000\000\000TUUUUU/@\254\252\252\252\252\312K@&vb\'v\002w@TUUUUU)@TUUUU\355h@\000\000\000\000\000\000\010@UUUUUU\021@\000\000\000\000\000\0009@\254\252\252\252\252(\210@\000\000\000\000\000\000\000\000TUUUU\265C@\253\252\252\252\252\232b@\254\252\252\252\252*O@\000\000\000\000\000\000\000\000\253\252\252\252\252j2@TUUUU5l@\000\000\000\000\000\000\000\000\000\000\000\000\000\270k@\333\266m\333\266\355@@\254\252\252\252\252\2525@UUUUUeP@UUUUUuc@\253\252\252\252\252*S@fffff\346O@\000\000\000\000\000\000\000\000\000\000\000\000\000\200`@UUUUU\302\221@TUUUU\325-@\253\252\252\252\252\212B@\000\000\000\000\000\000\000\000TUUUU%Z@UUUUU\245`@\000\000\000\000\000 G@\000\000\000\000\000\000@@\253\252\252\252\252\272S@\000\000\000\000\000\000\000\000333333_@\000\000\000\000\000Tr@\000\000\000\000\000\200<@\253\252\252\252\252\n@@\000\000\000\000\000\200A@\000\000\000\000\000\000\360\277\027]t\321EWh@\254\252\252\252\252\252\032@\000\000\000\000\000\200M@\000\000\000\000\000\\\226@UUUUU\245R@\000\000\000\000\000\000\360\277\253\252\252\252\252\302d@\254\252\252\252\252\272X@\000\000\000\000\000\000\000\000\330\211\235\330\211]b@\000\000\000\000\000\000\000\000\000\000\000\000\000\354s@\272\350\242\213.\2723@TUUUUeW@UUUUUeQ@\000\000\000\000\000\000\000\000\000\000\000\000\000(i@\000\000\000\000\000\000\000\000\254\252\252\252\252\3527@\254\252\252\252\252\2528@\253\252\252\252\252\231\223@TUUUU5F@\000\000\000\000\000\300H@UUUUU\305S@\253\252\252\252\252Zr@\000\000\000\000\000 A@\253\252\252\252\252\2520@\254\252\252\252\252\252\034@\252\252\252\252\2522i@\000\000\000\000\000\320^@\000\000\000\000\000@I@\254\252\252\252\252jW@\000\000\000\000\000\000\000\000\253\252\252\252\252\302`@l(\257\241\274&s@\000\000\000\000\000\240G@TUUUUe[@\254\252\252\252\252\332u@\000\000\000\000\000@L@\253\252\252\252\252\nB@\000\000\000\000\000`\\@\000\000\000\000\000\234w@\000\000\000\000\000hn@!\"\"\"\"\342h@fffff\346_@\254\252\252\252\252\312V@\000\000\000\000\000\0005@\000\000\000\000\000 N@UUUUU-`@\000\000\000\000\000\320S@\000\000\000\000\000\200G@TUUUUuC@\000\000\000\000\000\200L@\253\252\252\252\352\037\301@\254\252\252\252\252\312F@UUUUUu`@TUUUUe^@\000\000\000\000\000\200Q@\333\266m\333\266\325q@\000\000\000\000\000\240c@\000\000\000\000\000\000@@\000\000\000\000\000@5@\000\000\000\000\000 ]@O\354\304N\354\274\214@UUUUUU$@\232\231\231\231\231\tc@\000\000\000\000\000\340E@UUUUU\205T@\000\000\000\000\000`@@\000\000\000\000\000\000\000\000TUUUUUM@\000\000\000\000\000\240A@\253\252\252\252\252\2521@TUUUUuL@UUUUU\025d@\000\000\000\000\000\000 @TUUUU\245Z@\000\000\000\000\000\240R@\000\000\000\000\000\360]@\321E\027]tQO@TUUUUl\233@\000\000\000\000\000\0008@\000\000\000\000\000\3007@<\261\023;\261\223\207@\000\000\000\000\000\200%@\253\252\252\252\252*P@\253\252\252\252\252\332a@\253\252\252\252\252*0@\000\000\000\000\000\3009@\232\231\231\231\231Y_@\254\252\252\252\252\252E@\254\252\252\252\252\212K@\000\000\000\000\000\260W@\000\000\000\000\000\000\000\000UUUUUe`@\000\000\000\000\000\000\000\000\000\000\000\000\000\000$@TUUUU\325;@\000\000\000\000\000`O@UUUUU\325a@\253\252\252\252\252zd@\253\252\252\252\252\222a@\000\000\000\000\000\320X@TUUUU\2252@UUUUU\325\"@TUUUU\225;@\253\252\252\252\252JA@UUUUU\225T@\254\252\252\252\252\252%@\000\000\000\000\000\000\000\000\253\252\252\252\252\032c@\000\000\000\000\000\000\037@\253\252\252\252\252\322c@\000\000\000\000\000\330f@\000\000\000\000\000T\221@UUUUU\205R@\253\252\252\252\252\002a@\000\000\000\000\000@5@UUUUUEe@\000\000\000\000\000\000P@TUUUUU4@\000\000\000\000\000@V@\000\000\000\000\000\330g@J\222$I\222$M@TUUUUUN@\000\000\000\000\000(r@\000\000\000\000\000\200<@UUUUU\265c@\000\000\000\000\000\000;@\254\252\252\252\252\332Z@UUUUU\235p@\253\252\252\252\252\302t@\254\252\252\252\252Z\216@TUUUU\265F@\000\000\000\000\000\000,@\000\000\000\000\000\000J@\000\000\000\000\0000i@TUUUU\321~@\254\252\252\252\252jF@\232\231\231\231\231\231\361?\254\252\252\252\252\032f@\000\000\000\000\000F\234@\000\000\000\000\000\000&@\253\252\252\252\252\302r@\253\252\252\252\252*#@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\254\252\252\252\252\006w@\000\000\000\000\000X`@\254\252\252\252\252*>@\000\000\000\000\000@T@\000\000\000\000\000\000\030@\000\000\000\000\000\000C@\252\252\252\252\252zh@\000\000\000\000\000\020Q@TUUUU\325I@\254\252\252\252\252\252:@TUUUU\225]@\000\000\000\000\000@9@TUUUU\326\226@\253\252\252\252\252jC@\000\000\000\000\000\000-@\016\3455\224\327\320_@\000\000\000\000\000\300R@\232\231\231\231\231\231H@UUUUU]e@TUUUUmi@TUUUU\275l@\253\252\252\252\252B`@\000\000\000\000\000R\201@\000\000\000\000\000Xp@\253\252\252\252\252j4@TUUUUC\215@UUUUU\205T@\000\000\000\000\000\000\000\000UUUUUU1@TUUUU\343\206@\254\252\252\252\252\252\032@fffff\346N@TUUUU\025H@\000\000\000\000\000\214t@UUUUU\347\200@\000\000\000\000\000`I@\000\000\000\000\000\000\360\277\000\000\000\000\000\300A@\253\252\252\252\252\nA@\254\252\252\252\252\212}@\000\000\000\000\000\000\000\000UUUUU\325@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360\277\000\000\000\000\000\000\030@\000\000\000\000\000\000\000\000TUUUU\325=@\253\252\252\252\252\2522@TUUUU\215o@\000\000\000\000\000\000\000\000\000\000\000\000\000@V@\000\000\000\000\000@Y@\000\000\000\000\000\000\"@\253\252\252\252\252\nD@\253\252\252\252\252\na@ffffff,@\000\000\000\000\000\000E@\253\252\252\252\252\312r@UUUUU#\201@UUUUU\335c@333333\037@UUUUU\365S@\000\000\000\000\000\000(@\232\231\231\231\231\2310@\000\000\000\000\000\000-@\253\252\252\252\252\nE@\000\000\000\000\000\000I@\000\000\000\000\000\360S@\000\000\000\000\000pa@\000\000\000\000\000\000\014@\000\000\000\000\000\264\211@\000\000\000\000\000\200M@\254\252\252\252\252\005\234@\254\252\252\252\252\212X@\254\252\252\252\252\032y@\000\000\000\000\000\000\000\000\000\000\000\000\000\200X@\252\252\252\252\252\252\014@\000\000\000\000\000pP@TUUUU\345V@\253\252\252\252\252\312T@\254\252\252\252\252\232Y@\000\000\000\000\000\0004@s\034\307q\034GE@\000\000\000\000\000\000\000\000TUUUUuW@UUUUUU0@\222$I\222$\311L@\253\252\252\252\252Je@TUUUU\325/@\000\000\000\000\000\340@@\000\000\000\000\000\3005@\000\000\000\000\000\000\360\277\000\000\000\000\000hq@\000\000\000\000\000\000-@\000\000\000\000\000\200*@\000\000\000\000\000\000\000\000\253\252\252\252\252\032a@\000\000\000\000\000\310f@\000\000\000\000\000\000\000\000UUUUU\211\201@UUUUU\265A@UUUUU\325P@UUUUUER@\254\252\252\252\252\212u@TUUUUU\035@\334\266m\333\266m+@\000\000\000\000\000\260\252@\000\000\000\000\000\200F@TUUUU\3254@TUUUU\305]@\254\252\252\252\252\252=@\000\000\000\000\000\340P@TUUUUEh@\000\000\000\000\000\0007@TUUUUUo@TUUUU5V@\000\000\000\000\000\000#@\253\252\252\252\252jD@TUUUU\365O@TUUUU%\\@\000\000\000\000\000\000\000\000\254\252\252\252\252ZY@\000\000\000\000\000\000\000\000\000\000\000\000\000\0002@TUUUUUV@\254\252\252\252\252\332X@TUUUU]g@\000\000\000\000\000\000\000\000TUUUU\265m@\254\252\252\252\252jJ@q\034\307q\034\027\206@\000\000\000\000\000\000\000\000\000\000\000\000\000\320Z@\000\000\000\000\000@6@\000\000\000\000\000\360]@TUUUU\305W@\331\211\235\330\211\335\203@\000\000\000\000\000\000\000\000TUUUU\325Z@TUUUU\225D@\000\000\000\000\000\000,@TUUUU\225e@\000\000\000\000\000\310c@\000\000\000\000\000\000\000\000\000\000\000\000\000\000,@\000\000\000\000\000\000\000\000\000\000\000\000\000r\201@\000\000\000\000\000\000\000\000TUUUU\365V@\000\000\000\000\000\300R@\000\000\000\000\000\340F@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\252\252\252\252\007\220@\000\000\000\000\000\000\000\000TUUUUUZ@\000\000\000\000\000\000P@TUUUU\225[@UUUUUuA@\000\000\000\000\000\3007@\000\000\000\000\000@A@UUUUUeP@UUUUU\315d@\254\252\252\252\252\252<@TUUUU\025C@\000\000\000\000\000\000 @\000\000\000\000\000(d@TUUUUUN@\254\252\252\252\252*:@\253\252\252\252\252\352S@\000\000\000\000\000\300G@\000\000\000\000\000\000G@TUUUU\225C@\000\000\000\000\000\362\253@\253\252\252\252\252\302b@\253\252\252\252\252\252c@m\333\266m\333V\177@\000\000\000\000\000\370s@\000\000\000\000\000\000\000\000\000\000\000\000\000\200]@\000\000\000\000\000@_@TUUUUEV@TUUUU\225?@\000\000\000\000\000\340B@\000\000\000\000\000 F@TUUUU\3253@\000\000\000\000\000\000\000\000UUUUU\225A@TUUUUU(@TUUUU\365O@\000\000\000\000\000@F@33333\2632@\000\000\000\000\000\000\000\000\000\000\000\000\000\010f@TUUUU\0253@\000\000\000\000\000@@@\222$I\222$\313\242@\000\000\000\000\000`J@\000\000\000\000\000\000\000\000\253\252\252\252\252\312B@\000\000\000\000\000\340J@UUUUU5`@\254\252\252\252\252z[@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000TUUUU\365M@\253\252\252\252\252j5@\000\000\000\000\000\000A@\000\000\000\000\000\000\000\000vb\'vb\247P@TUUUUUJ@\000\000\000\000\000\254y@\000\000\000\000\000xs@TUUUU\360\252@\000\000\000\000\000\000\370?\315\314\314\314\314LV@\000\000\000\000\000\000\024@TUUUU\005n@\000\000\000\000\000\200;@UUUUU\350\222@\000\000\000\000\000\000=@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\254\252\252\252\252j]@UUUUU%d@UUUUUeQ@UUUUUU\020@\000\000\000\000\000@6@TUUUU\225>@\254\252\252\252\252\370\216@\253\252\252\252\252\232T@\000\000\000\000\000\000\000\000\000\000\000\000\000\3004@UUUUU}c@\000\000\000\000\000\000\000\000I\222$I\222\004s@TUUUU\205Z@TUUUU%V@\000\000\000\000\000\000\000\000\000\000\000\000\000 D@\000\000\000\000\000\200>@\000\000\000\000\000\0008@\000\000\000\000\000B\203@TUUUUU2@\000\000\000\000\000\330c@\000\000\000\000\000\000C@\222$I\222$\351X@\253\252\252\252\252\212B@\000\000\000\000\000\000\000\000\000\000\000\000\000\000 @\000\000\000\000\000Hh@\254\252\252\252\252\212^@\000\000\000\000\000\200:@TUUUUuE@UUUUU\255`@\000\000\000\000\000\000-@\000\000\000\000\000\300G@\253\252\252\252\252\330\200@\000\000\000\000\000\000\000\000TUUUU\325E@\000\000\000\000\000@H@TUUUU\305W@\000\000\000\000\000\000C@UUUUU\307\204@\000\000\000\000\000\200-@\000\000\000\000\000\000\030@\000\000\000\000\000\214u@\254\252\252\252\252\032[@\000\000\000\000\000\020[@\000\000\000\000\000@r@TUUUU\221\225@\000\000\000\000\000pR@\000\000\000\000\000\000\000\000\254\252\252\252\252JJ@\000\000\000\000\000\300D@\000\000\000\000\000PS@\000\000\000\000\000\000\360?\027]t\321E\327i@\000\000\000\000\000\034{@fffff\346H@TUUUU\345Z@\254\252\252\252\252\2526@\000\000\000\000\000\240V@\253\252\252\252\252*\"@\000\000\000\000\000\000\000\000\254\252\252\252\252\312H@UUUUU\225A@\000\000\000\000\000\000\000\000\253\252\252\252\252j5@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000TUUUU\215v@\253\252\252\252\252\372P@\000\000\000\000\000@D@\254\252\252\252\252\2528@\000\000\000\000\000\2003@TUUUU\345V@\000\000\000\000\000\000*@\000\000\000\000\000\n\200@TUUUUUG@UUUUU\365S@TUUUU\255m@\000\000\000\000\000\0004@\000\000\000\000\000\000\024@\253\252\252\252\252\212B@\000\000\000\000\000\200L@\000\000\000\000\000\240Q@\000\000\000\000\000\200?@\000\000\000\000\000\000\000\000\253\252\252\252\252ZT@\000\000\000\000\000\340X@UUUUUqq@\000\000\000\000\000\000\000\000\000\000\000\000\000`J@\253\252\252\252\252\026t@33333\"\273@TUUUU\265G@\253\252\252\252\252\252A@\000\000\000\000\000@?@\000\000\000\000\000\360T@\252\252\252\252\252\372n@\000\000\000\000\000\220Z@\000\000\000\000\000\0009@\000\000\000\000\000xr@\253\252\252\252\252\252B@J\222$I\222\244i@\254\252\252\252\252JM@\253\252\252\252\252\236p@\000\000\000\000\000\000\000\000\254\252\252\252\252\256\207@\254\252\252\252\252*)@\000\000\000\000\000\000l@s\034\307q\034GJ@\254\252\252\252\252**@TUUUUUE@\000\000\000\000\000\2005@TUUUUuL@(vb\'vbG@\253\252\252\252\252\252S@\000\000\000\000\000\260\\@UUUUU\365A@\253\252\252\252\252JQ@\000\000\000\000\000\300>@\000\000\000\000\000\000O@TUUUU\225N@\000\000\000\000\000\320[@UUUUUU\"@\000\000\000\000\000\260\205@\000\000\000\000\000\000\000\000\000\000\000\000\000\2006@\254\252\252\252\252jF@\000\000\000\000\000\200d@\000\000\000\000\000\000\360\277\000\000\000\000\000\340[@\350y\236\347y\2362@\000\000\000\000\000\000\000\000\254\252\252\252\252:^@\000\000\000\000\000@[@\252\252\252\252\252\342l@UUUUU\ra@\254\252\252\252\252\252;@\253\252\252\252\252\252@@]t\321E\027\335}@\000\000\000\000\000\000\000\000\000\000\000\000\000\350x@TUUUU\225m@\000\000\000\000\000\000\000\000\000\000\000\000\000\230f@TUUUU\365K@TUUUU\325O@\000\000\000\000\000\000\000\000\000\000\000\000\000`W@TUUUU\225M@\000\000\000\000\000\000\000\000\000\000\000\000\000`P@\000\000\000\000\000\000\000\000\000\000\000\000\000\200@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\"@\000\000\000\000\000\000\000\000\252\252\252\252\252bl@TUUU\025\355\267@\000\000\000\000\000\200D@\254\252\252\252\252:^@\000\000\000\000\000\000\"@TUUUU\t|@\000\000\000\000\000\000\000\000UUUUU}`@\000\000\000\000\000@9@\000\000\000\000@q\255@TUUUU\005V@\254\252\252\252\252\312K@\334\266m\333\266}\205@\252\252\252\252*\305\242@\000\000\000\000\000\2008@\253\252\252\252\252*T@\000\000\000\000\000 H@\000\000\000\000\000\200T@\254\252\252\252\252\252=@UUUUU]b@\000\000\000\000\000`G@\254\252\252\252\252\252/@\000\000\000\000\000\000\000\000TUUUUUL@\000\000\000\000\000\240\210@\000\000\000\000\000\000\000\000TUUUU5K@\000\000\000\000\000 d@\254\252\252\252\252\212\177@\000\000\000\000\000\000\020@\034\307q\034\3071V@%I\222$IRT@\253\252\252\252\252JA@TUUUU5Y@\000\000\000\000\000\300F@I\222$I\222<\232@TUUUU\025W@\000\000\000\000\000\000\000\000\315\314\314\314\314\314?@TUUUU\265E@\252\252\252\252\252\272n@\000\000\000\000\000\000 @\000\000\000\000\000H\212@\000\000\000\000\000\2000@\000\000\000\000\000\030`@TUUUU\225I@\000\000\000\000\000\3002@\000\000\000\000\000\232\202@\000\000\000\000\000 E@\000\000\000\000\000\000\000\000TUUUU\2254@\000\000\000\000\000\000\000\000\000\000\000\000\000 F@\212\235\330\211\235\330L@TUUUU\325^@\000\000\000\000\000\000\000\000TUUUUU4@\000\000\000\000\000\000\000\000\254\252\252\252\252\3529@UUUUU\035e@TUUUU\365Y@\000\000\000\000\000\300L@UUUUU\365@@\000\000\000\000\000\000O@\000\000\000\000\000@_@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\253\252\252\252\252\033\225@UUUUU\365A@fffff\346^@UUUUU\325A@\253\252\252\252\252~\203@\000\000\000\000\000\000\000\000\254\252\252\252\252\352I@\000\000\000\000\000\3006@TUUUU\265D@\000\000\000\000\000\200F@\000\000\000\000\000\340R@\254\252\252\252\252\252]@TUUUU5B@\000\000\000\000\000\200O@\222$I\222$ik@\000\000\000\000\000\000\360\277UUUUU\365P@\000\000\000\000\000\000\000\000\253\252\252\252\252\016u@\253\252\252\252\252\212`@\000\000\000\000\000 u@\000\000\000\000\000 `@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000fffff&L@\253\252\252\252\252\nQ@\000\000\000\000\0000`@\000\000\000\000\000\000\034@\000\000\000\000\000\000G@\000\000\000\000\000\200*@TUUUU\325<@UUUUU\325b@\000\000\000\000\000\3008@\000\000\000\000\000\000\000\000\000\000\000\000\000\000;@\000\000\000\000\000\230d@\215.\272\350\242\313\\@\000\000\000\000\000\340L@\252\252\252\252\252\262f@UUUUU\305P@\000\000\000\000\000\000\000\000\000\000\000\000\000\000+@\000\000\000\000\000\000#@\254\252\252\252\252*9@\254\252\252\252\252*6@TUUUU\265L@UUUUU\355d@\000\000\000\000\000\000,@\253\252\252\252\252\232p@\000\000\000\000\000\000\000\000\000\000\000\000\000\240n@ffffff1@\000\000\000\000\000\300D@\000\000\000\000\000@S@\254\252\252\252\252*)@\253\252\252\252\252\252p@\252\252\252\252\252\252g@\253\252\252\252\252\nB@\000\000\000\000\000\000\000\000\000\000\000\000\000\010o@\253\252\252\252\252+\223@\254\252\252\252\252*.@\000\000\000\000\000\300V@\000\000\000\000\000@Z@UUUUU\r`@\000\000\000\000\0008k@\000\000\000\000\000\000G@\000\000\000\000\000\272\206@\000\000\000\000\000\000\000\000UUUUU\035T@\000\000\000\000\000\000\000\000\254\252\252\252\252Z]@\000\000\000\000\000\000\000\000\000\000\000\000\000xe@\254\252\252\252\252\352Z@\232\231\231\231\231\031@@\000\000\000\000\000 L@\000\000\000\000\000\000\000\000\253\252\252\252\2526p@\000\000\000\000\000`M@\000\000\000\000\000\000\000\000\330\211\235\330\211\235,@\254\252\252\252\252\252E@\000\000\000\000\000 k@TUUUU\325L@TUUUU\325G@\253\252\252\252\252\252S@\000\000\000\000\000\300\\@\000\000\000\000\000\200(@\333\266m\333\266m#@\254\252\252\252\252\252\030@TUUUU\245^@\254\252\252\252\252jK@\254\252\252\252\252*;@\254\252\252\252\252\372X@\000\000\000\000\000\3007@\254\252\252\252\252\252,@\254\252\252\252\252\252\036@\254\252\252\252\252JX@\000\000\000\000\000\000\000\000TUUUUU<@\254\252\252\252\252:[@\000\000\000\000\000\000\022@TUUUUQ\216@TUUUUeZ@\254\252\252\252\252jH@TUUUU\365_@\000\000\000\000\000 ]@TUUUUe\213@\000\000\000\000\000\260Q@\000\000\000\000\000\000\000\000\000\000\000\000\000\320X@\000\000\000\000\000\000\000\000\000\000\000\000\000\0003@\254\252\252\252\252\346u@\000\000\000\000\000\0006@\000\000\000\000\000\200a@\000\000\000\000\000\340e@\254\252\252\252\252*\'@\000\000\000\000\000\000\000\000\253\252\252\252\252Bc@\253\252\252\252\252R`@UUUUUEQ@\000\000\000\000\000\3007@\000\000\000\000\000`N@\000\000\000\000\000\000J@\000\000\000\000\000\340G@\034\307q\034\307q.@\333\266m\333\266\255S@\254\252\252\252\252\352N@\252\252\252\252\252\362m@\000\000\000\000\000 Q@\000\000\000\000\000\210m@\252\252\252\252\252\252\004@\000\000\000\000\0000c@\000\000\000\000\000\200%@\253\252\252\252\2522r@\000\000\000\000\000\000\000\000\000\000\000\000\000\320p@\000\000\000\000\000PQ@\252\252\252\252\252\352l@\000\000\000\000\000\000@@\000\000\000\000\000\000\000\000TUUUU\205V@\000\000\000\000\000\000\000\000\335\335\335\335\335}l@\000\000\000\000\000 \177@\000\000\000\000\000\240I@\000\000\000\000\000\0004@TUUUU\365W@UUUUU\315d@\254\252\252\252\252\232W@\000\000\000\000\000\000\000\000\000\000\000\000\000\200;@TUUUU\365m@\254\252\252\252\252Z\206@\252\252\252\252\252\212f@\254\252\252\252\252\232W@TUUUU\325=@\253\252\252\252\252\212d@\000\000\000\000\000\000\037@TUUUUeY@TUUUU5Y@\253\252\252\252\252\362`@\000\000\000\000\000\000\000\000\000\000\000\000\000\300B@\254\252\252\252\252jK@\000\000\000\000\000\000\360\277\254\252\252\252\252\252<@\000\000\000\000\000\000\000\000TUUUU%]@UUUUU\355\201@\253\252\252\252\252\252#@\252\252\252\252\252\212g@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\360\277\000\000\000\000\000`@@TUUUU\ro@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000TUUUUU:@\306N\354\304N\354c@\253\252\252\252\252JP@\000\000\000\000\0000S@\253\252\252\252\252\352S@TUUUU\325G@\000\000\000\000\000`@@\000\000\000\000\000\000/@\000\000\000\000\000\334r@\000\000\000\000\000\000\000\000TUUUU\325D@\254\252\252\252\252\2526@UUUUU]`@\000\000\000\000\000\340D@\253\252\252\252\252ZT@\000\000\000\000\000\000\000\000\254\252\252\252\252\252<@\000\000\000\000\000\000B@\000\000\000\000\000\300r@\211\210\210\210\210\310b@\000\000\000\000\000\304\177@TUUUU5K@\253\252\252\252\252\nR@\254\252\252\252\252\312K@\254\252\252\252\252\232^@\252\252\252\252\252\362f@\000\000\000\000\000 F@\000\000\000\000\000\000\000\000\254\252\252\252\252\272[@333333\013@TUUUU\025D@\000\000\000\000\000\000D@UUUUUU$@\000\000\000\000\000\0003@\254\252\252\252\252*>@\000\000\000\000\000\320Q@\000\000\000\000\000\010k@UUUUUMc@UUUUU\305Q@\000\000\000\000\000\320T@\000\000\000\000\000\000\000\000\254\252\252\252\252JF@\000\000\000\000\000\000\000\000UUUUU\341s@\000\000\000\000\000`G@UUUUUU\325?\253\252\252\252\252*U@TUUUU\025<@\000\000\000\000\000\020`@\000\000\000\000\000\300J@\000\000\000\000\0000W@\000\000\000\000\000\240O@\254\252\252\252\252\332{@\254\252\252\252\252\252W@n\333\266m\333\266\025@\000\000\000\000\000\020R@\252\252\252\252\252ji@\000\000\000\000\0007q@UUUUU\215c@\000\000\000\000\000\000\000\000TUUUU\025<@333333\037@\253\252\252\252\252t\200@\253\252\252\252\252\252@@\232\231\231\231\231\271a@\253\252\252\252\252\252C@\000\000\000\000\000\200A@\000\000\000\000\000`T@\253\252\252\252\252\nC@\000\000\000\000\000\000\000\000\252\252\252\252\252Bh@\000\000\000\000\000\000\'@UUUUUU\020@\000\000\000\000\000\000\000\000\254\252\252\252\252\3526@"
      }
    }
  }
}
node {
  name: "tensors/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1192
          }
        }
        tensor_content: "P\003\000\000\000\000\000\000\272\002\000\000\000\000\000\000\311\026\000\000\000\000\000\0003\000\000\000\000\000\000\000\224\000\000\000\000\000\000\000L2\000\000\000\000\000\000w\002\000\000\000\000\000\000\275\023\000\000\000\000\000\000\026\024\000\000\000\000\000\000\t\000\000\000\000\000\000\000w\003\000\000\000\000\000\000\355\000\000\000\000\000\000\000n\000\000\000\000\000\000\000.\036\000\000\000\000\000\000\033\002\000\000\000\000\000\000lr\003\000\000\000\000\000\000\313\002\000\000\000\000\000\000\353\005\000\000\000\000\000\000G\000\000\000\000\000\000\000\374\001\000\000\000\000\000\000\370\000\000\000\000\000\000\000\336\003\000\000\000\000\000\000I\003\000\000\000\000\000\000Z\002\000\000\000\000\000\000\300\000\000\000\000\000\000\000\333\002\000\000\000\000\000\000I\002\000\000\000\000\000\000;-\000\000\000\000\000\000\350\000\000\000\000\000\000\000u\001\000\000\000\000\000\000<\000\000\000\000\000\000\000\227\020\000\000\000\000\000\000\261\022\000\000\000\000\000\000c\001\000\000\000\000\000\000M\003\000\000\000\000\000\000M\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000x\017\000\000\000\000\000\000D\000\000\000\000\000\000\000}\000\000\000\000\000\000\000\3247\000\000\000\000\000\000\352\n\000\000\000\000\000\000G\000\000\000\000\000\000\000\335\000\000\000\000\000\000\000\304\001\000\000\000\000\000\000\\\002\000\000\000\000\000\000\200\003\000\000\000\000\000\000%\007\000\000\000\000\000\000\346\006\000\000\000\000\000\000\361\003\000\000\000\000\000\000e\000\000\000\000\000\000\000\030\010\000\000\000\000\000\000k.\000\000\000\000\000\000\255\001\000\000\000\000\000\000\222\001\000\000\000\000\000\000\250\001\000\000\000\000\000\000K\006\000\000\000\000\000\000i\004\000\000\000\000\000\0004\000\000\000\000\000\000\000\377\377\377\377\377\377\377\377\032\004\000\000\000\000\000\000\246\000\000\000\000\000\000\000L\000\000\000\000\000\000\000E\001\000\000\000\000\000\000\001\002\000\000\000\000\000\000\201\002\000\000\000\000\000\000-?\000\000\000\000\000\000\244\000\000\000\000\000\000\000`\000\000\000\000\000\000\000#\001\000\000\000\000\000\000!\n\000\000\000\000\000\000\351\000\000\000\000\000\000\000=\006\000\000\000\000\000\000\361\002\000\000\000\000\000\000\312\005\000\000\000\000\000\000\210\205\000\000\000\000\000\000\014\036\000\000\000\000\000\000\031\013\000\000\000\000\000\0003\000\000\000\000\000\000\000\276\005\000\000\000\000\000\000\257\034\000\000\000\000\000\000\306?\000\000\000\000\000\000.\001\000\000\000\000\000\000N\001\000\000\000\000\000\000)\005\000\000\000\000\000\000\035\000\000\000\000\000\000\000p\010\000\000\000\000\000\000#\001\000\000\000\000\000\000<\000\000\000\000\000\000\000\032\n\000\000\000\000\000\000\r\001\000\000\000\000\000\000D\005\000\000\000\000\000\000B\004\000\000\000\000\000\000\214\002\000\000\000\000\000\000\313\001\000\000\000\000\000\000\314\000\000\000\000\000\000\000W\010\000\000\000\000\000\000\266\001\000\000\000\000\000\000\222\005\000\000\000\000\000\000R\003\000\000\000\000\000\000\302\006\000\000\000\000\000\000\311R\000\000\000\000\000\000\225\005\000\000\000\000\000\000\263\001\000\000\000\000\000\000\252\003\000\000\000\000\000\000^\240\001\000\000\000\000\000\315\000\000\000\000\000\000\000O\035\000\000\000\000\000\000\273\002\000\000\000\000\000\000v\001\000\000\000\000\000\000\211\001\000\000\000\000\000\000\266\"\000\000\000\000\000\000_\000\000\000\000\000\000\000\312\r\000\000\000\000\000\000\007\000\000\000\000\000\000\000v\000\000\000\000\000\000\000\224\002\000\000\000\000\000\000r\010\000\000\000\000\000\000\003\014\000\000\000\000\000\000\007$\000\000\000\000\000\000\373\002\000\000\000\000\000\000\337\003\000\000\000\000\000\000\021\004\000\000\000\000\000\000g\010\000\000\000\000\000\000v\005\000\000\000\000\000\000lg\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\265\000\000\000\000\000\000\000V\001\000\000\000\000\000\000d\t\000\000\000\000\000\000\324\003\000\000\000\000\000\000\203\000\000\000\000\000\000\000\250\002\000\000\000\000\000\000k\000\000\000\000\000\000\000\214\001\000\000\000\000\000\000\202\nn\000\000\000\000\000\000\256\002\000\000\000\000\000\000\322\001\000\000\000\000\000\000\320\000\000\000\000\000\000\000R\005\000\000\000\000\000\000\203\001\000\000\000\000\000\000*\004\000\000\000\000\000\000\314\002\000\000\000\000\000\000/\002\000\000\000\000\000\000J\016\000\000\000\000\000\000\313\001\000\000\000\000\000\000\003\000\000\000\000\000\000\000O\r\000\000\000\000\000\000o\036\000\000\000\000\000\000\370\007\000\000\000\000\000\000\235\005\000\000\000\000\000\000\030\007\000\000\000\000\000\000b\001\000\000\000\000\000\000\301\000\000\000\000\000\000\000\\\004\000\000\000\000\000\0004\000\000\000\000\000\000\000\377\377\377\377\377\377\377\377e\000\000\000\000\000\000\000\213\322\003\000\000\000\000\000p*\001\000\000\000\000\000\243\027\000\000\000\000\000\000\225\000\000\000\000\000\000\000\343\002\000\000\000\000\000\000B\004\000\000\000\000\000\000,\000\000\000\000\000\000\0004\000\000\000\000\000\000\000\340\003\000\000\000\000\000\0007\001\000\000\000\000\000\000L\003\000\000\000\000\000\000\271\021\000\000\000\000\000\000\202\006\000\000\000\000\000\000\267\001\000\000\000\000\000\000\356\tm\020\000\000\000\000\000\000L\000\000\000\000\000\000\000\361\003\000\000\000\000\000\000\323\000\000\000\000\000\000\000\010\001\000\000\000\000\000\000\242\001\000\000\000\000\000\000\242\001\000\000\000\000\000\000\305\\\000\000\000\000\000\000S\001\000\000\000\000\000\0006\002\000\000\000\000\000\000\317\002\000\000\000\000\000\000;\000\000\000\000\000\000\000\220\016\000\000\000\000\000\000\200\001\000\000\000\000\000\000\r\000\000\000\000\000\000\000\342\000\000\000\000\000\000\000\205\003\000\000\000\000\000\000\320\000\000\000\000\000\000\000\245\n\000\000\000\000\000\000a\001\000\000\000\000\000\0008\000\000\000\000\000\000\000\027\001\000\000\000\000\000\000M\034\000\000\000\000\000\000\214\003\000\000\000\000\000\000\344\013\000\000\000\000\000\000\025\006\000\000\000\000\000\000\250\000\000\000\000\000\000\0003\000\000\000\000\000\000\000y\004\000\000\000\000\000\000\330\000\000\000\000\000\000\000\301\010\000\000\000\000\000\000\375\001\000\000\000\000\000\000f[\000\000\000\000\000\000\312\010\000\000\000\000\000\000o\002\000\000\000\000\000\000\254\001\000\000\000\000\000\000\005\001\000\000\000\000\000\000r\000\000\000\000\000\000\000\014\010\000\000\000\000\000\000P\000\000\000\000\000\000\000{\021\000\000\000\000\000\000L\010\000\000\000\000\000\000\210\007\000\000\000\000\000\000u\000\000\000\000\000\000\000\006\t\000\000\000\000\000\000\313\003\000\000\000\000\000\000\365\004\000\000\000\000\000\000I\002\000\000\000\000\000\000C\000\000\000\000\000\000\000r\000\000\000\000\000\000\000\366\000\000\000\000\000\000\000\237\025\000\000\000\000\000\000z\001\000\000\000\000\000\000?\005\000\000\000\000\000\000\031\000\000\000\000\000\000\000.\000\000\000\000\000\000\000\246\000\000\000\000\000\000\000\223\035\000\000\000\000\000\000H\000\000\000\000\000\000\000\211\000\000\000\000\000\000\000\007\013\000\000\000\000\000\000\230\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000_\000\000\000\000\000\000\000\371\t\000\000\000\000\000\000\"\006\000\000\000\000\000\000\360\001\000\000\000\000\000\000\362\000\000\000\000\000\000\000\271\014\000\000\000\000\000\000\375\001\000\000\000\000\000\000\324\002\000\000\000\000\000\000F\001\000\000\000\000\000\000\360\001\000\000\000\000\000\000\020\000\000\000\000\000\000\000h\002\000\000\000\000\000\000u\306\001\000\000\000\000\000\271\003\000\000\000\000\000\000\313\000\000\000\000\000\000\000C\000\000\000\000\000\000\000}\002\000\000\000\000\000\000w\003\000\000\000\000\000\000\335\000\000\000\000\000\000\0001\000\000\000\000\000\000\000\347\005\000\000\000\000\000\000<\000\000\000\000\000\000\000\222\001\000\000\000\000\000\000\2670\000\000\000\000\000\000R\003\000\000\000\000\000\000\372\000\000\000\000\000\000\000Z\032\000\000\000\000\000\000.$\000\000\000\000\000\000C\002\000\000\000\000\000\000\030\000\000\000\000\000\000\000\202\235\000\000\000\000\000\000|\242\000\000\000\000\000\000\303\000\000\000\000\000\000\0006\002\000\000\000\000\000\000\224\002\000\000\000\000\000\000q\022\000\000\000\000\000\000!\000\000\000\000\000\000\000\300\007\000\000\000\000\000\000G\000\000\000\000\000\000\000ZM\000\000\000\000\000\000R\000\000\000\000\000\000\000O\001\000\000\000\000\000\000^\001\000\000\000\000\000\000X\000\000\000\000\000\000\000\322\004\000\000\000\000\000\000\222\000\000\000\000\000\000\000mn\000\000\000\000\000\000\345\004\000\000\000\000\000\000~\022\000\000\000\000\000\000\035\002\000\000\000\000\000\000\036\005\000\000\000\000\000\000\030\000\000\000\000\000\000\0008\001\000\000\000\000\000\000\324\001\000\000\000\000\000\000\222\t\000\000\000\000\000\000\230\000\000\000\000\000\000\000\214\000\000\000\000\000\000\000,\002\000\000\000\000\000\000\313\307\000\000\000\000\000\000:\007\000\000\000\000\000\000\323\002\000\000\000\000\000\000v\002\000\000\000\000\000\000\312\000\000\000\000\000\000\000w\021\000\000\000\000\000\000\305\000\000\000\000\000\000\000\325\000\000\000\000\000\000\000?\001\000\000\000\000\000\000\242\001\000\000\000\000\000\000\007A\000\000\000\000\000\000B\000\000\000\000\000\000\000\321\001\000\000\000\000\000\000~\004\000\000\000\000\000\000\350\001\000\000\000\000\000\000\200\007\000\000\000\000\000\0007\000\000\000\000\000\000\000\021\003\000\000\000\000\000\000\204\000\000\000\000\000\000\000\237\000\000\000\000\000\000\000\303\000\000\000\000\000\000\000l\013\000\000\000\000\000\0002\000\000\000\000\000\000\000\222\001\000\000\000\000\000\000\371\000\000\000\000\000\000\000\263\001\000\000\000\000\000\000\325\000\000\000\000\000\000\000\3508\000\000\000\000\000\0005\000\000\000\000\000\000\000\207\000\000\000\000\000\000\000\316\004\000\000\000\000\000\000\237\000\000\000\000\000\000\000\014\001\000\000\000\000\000\000\243\003\000\000\000\000\000\000\201\002\000\000\000\000\000\000x\000\000\000\000\000\000\000K\001\000\000\000\000\000\000\330\007\000\000\000\000\000\000\234\002\000\000\000\000\000\000\360\001\000\000\000\000\000\000n\000\000\000\000\000\000\000\253\007\000\000\000\000\000\000\343\004\000\000\000\000\000\0007\000\000\000\000\000\000\0000\000\000\000\000\000\000\000\203\004\000\000\000\000\000\000\263\016\000\000\000\000\000\000\316\t\000\000\000\000\000\000m\001\000\000\000\000\000\000\377\000\000\000\000\000\000\000J\000\000\000\000\000\000\000]\000\000\000\000\000\000\000(\002\000\000\000\000\000\000\336\000\000\000\000\000\000\000r\001\000\000\000\000\000\000p\000\000\000\000\000\000\0006\000\000\000\000\000\000\000\246!\000\000\000\000\000\0002\000\000\000\000\000\000\000\t\004\000\000\000\000\000\000f\004\000\000\000\000\000\000\212\020\000\000\000\000\000\000\376\000\000\000\000\000\000\000\250\001\000\000\000\000\000\000P\000\000\000\000\000\000\000\217\002\000\000\000\000\000\000R\035\000\000\000\000\000\000E\004\000\000\000\000\000\000\355\002\000\000\000\000\000\000)\004\000\000\000\000\000\000\323\002\000\000\000\000\000\000\030\002\000\000\000\000\000\000\006f\000\000\000\000\000\000\376\007\000\000\000\000\000\000V\001\000\000\000\000\000\000P\000\000\000\000\000\000\000\222\003\000\000\000\000\000\000\216\005\000\000\000\000\000\000Y\003\000\000\000\000\000\000._\000\000\000\000\000\0000\001\000\000\000\000\000\0009\000\000\000\000\000\000\000\230\000\000\000\000\000\000\000\242\034\000\000\000\000\000\000\021\014\000\000\000\000\000\000\207\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\253\003\000\000\000\000\000\000|*\000\000\000\000\000\000\032\000\000\000\000\000\000\000|\017\000\000\000\000\000\000\303\000\000\000\000\000\000\000A\000\000\000\000\000\000\000\271\003\000\000\000\000\000\000\323\007\000\000\000\000\000\0001\002\000\000\000\000\000\000\'\002\000\000\000\000\000\000\334\005\000\000\000\000\000\000C\000\000\000\000\000\000\000P\000\000\000\000\000\000\000\214\006\000\000\000\000\000\000\342\000\000\000\000\000\000\000\307\001\000\000\000\000\000\000j\000\000\000\000\000\000\000\'\001\000\000\000\000\000\000~\000\000\000\000\000\000\000\235\355\000\000\000\000\000\000\003\001\000\000\000\000\000\000H\000\000\000\000\000\000\000\357\025\000\000\000\000\000\000u\002\000\000\000\000\000\000t\000\000\000\000\000\000\000z>\000\000\000\000\000\000\246\004\000\000\000\000\000\000\337\014\000\000\000\000\000\000\355\003\000\000\000\000\000\000\215\022\000\000\000\000\000\000D\010\000\000\000\000\000\000\016\001\000\000\000\000\000\000BN\000\000\000\000\000\000\224\206\000\000\000\000\000\000\266\000\000\000\000\000\000\000\310\000\000\000\000\000\000\000\254x\000\000\000\000\000\000N\000\000\000\000\000\000\000\340\002\000\000\000\000\000\000\342\000\000\000\000\000\000\000\3754\000\000\000\000\000\000o\016\000\000\000\000\000\000\233\002\000\000\000\000\000\000\222\001\000\000\000\000\000\000C\000\000\000\000\000\000\000i\000\000\000\000\000\000\000\251\016\000\000\000\000\000\000\321\002\000\000\000\000\000\000n\000\000\000\000\000\000\000\274\001\000\000\000\000\000\000\377\377\377\377\377\377\377\377f\000\000\000\000\000\000\000q\000\000\000\000\000\000\000r\000\000\000\000\000\000\000K\000\000\000\000\000\000\000\301\007\000\000\000\000\000\000&\000\000\000\000\000\000\000\215\002\000\000\000\000\000\000u\004\000\000\000\000\000\000$\000\000\000\000\000\000\000E\001\000\000\000\000\000\000\235\002\000\000\000\000\000\000C\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000U\003\000\000\000\000\000\000\014\024\000\000\000\000\000\000\320\007\000\000\000\000\000\000D\000\000\000\000\000\000\000\363\000\000\000\000\000\000\000t\000\000\000\000\000\000\000e\000\000\000\000\000\000\000R\000\000\000\000\000\000\000W\001\000\000\000\000\000\000)\003\000\000\000\000\000\0004\004\000\000\000\000\000\000{\036\000\000\000\000\000\000\014\000\000\000\000\000\000\000^\r\000\000\000\000\000\000l\000\000\000\000\000\000\000\3650\000\000\000\000\000\000\361\001\000\000\000\000\000\000\344\tt\000\000\000\000\000\000\203\000\000\000\000\000\000\000\351\000\000\000\000\000\000\000(\000\000\000\000\000\000\000\274\003\000\000\000\000\000\000-\005\000\000\000\000\000\000S\000\000\000\000\000\000\000\025\014\000\000\000\000\000\000\224\000\000\000\000\000\000\000\310\001\000\000\000\000\000\000\003\001\000\000\000\000\000\000y\n\000\000\000\000\000\000\313\t\000\000\000\000\000\000\255\000\000\000\000\000\000\000\261\021\000\000\000\000\000\000\200\000\000\000\000\000\000\000o\001\000\000\000\000\000\000_\010\000\000\000\000\000\000\372\000\000\000\000\000\000\000\225\000\000\000\000\000\000\000?\002\000\000\000\000\000\000\014\002\000\000\000\000\000\000\311\010\000\000\000\000\000\000w\004\000\000\000\000\000\000!\000\000\000\000\000\000\000\322\000\000\000\000\000\000\000y\021\000\000\000\000\000\000\006\002\000\000\000\000\000\000\217\000\000\000\000\000\000\000;\004\000\000\000\000\000\000\234\000\000\000\000\000\000\000Y\000\000\000\000\000\000\000\010\001\000\000\000\000\000\000\215\001\000\000\000\000\000\000\001\006\000\000\000\000\000\000+\000\000\000\000\000\000\000m\016\000\000\000\000\000\000\024\'\000\000\000\000\000\000\222\t\000\000\000\000\000\000\323\001\000\000\000\000\000\000A\t\000\000\000\000\000\000\210\000\000\000\000\000\000\000&\001\000\000\000\000\000\000\r\003\000\000\000\000\000\000\034\036\000\000\000\000\000\000\n\001\000\000\000\000\000\000\320\001\000\000\000\000\000\000\326\001\000\000\000\000\000\000f\000\000\000\000\000\000\000\205\026\000\000\000\000\000\000\302\004\000\000\000\000\000\000\224\000\000\000\000\000\000\0003\000\000\000\000\000\000\000J\000\000\000\000\000\000\000X\004\000\000\000\000\000\000\375\000\000\000\000\000\000\000\227\001\000\000\000\000\000\000\311\000\000\000\000\000\000\000\001\034\000\000\000\000\000\0003\000\000\000\000\000\000\000#\000\000\000\000\000\000\000\270\000\000\000\000\000\000\000\275\000\000\000\000\000\000\000:\t\000\000\000\000\000\000w\002\000\000\000\000\000\000\247\001\000\000\000\000\000\000T\003\000\000\000\000\000\000\350\000\000\000\000\000\000\000\247\001\000\000\000\000\000\000\330\001\000\000\000\000\000\0005\002\000\000\000\000\000\000\316\000\000\000\000\000\000\000G\001\000\000\000\000\000\000\026\000\000\000\000\000\000\000\221\000\000\000\000\000\000\000\t\004\000\000\000\000\000\000\343\001\000\000\000\000\000\000\366\003\000\000\000\000\000\000<\007\000\000\000\000\000\000M\000\000\000\000\000\000\000\361\000\000\000\000\000\000\000a\030\000\000\000\000\000\000\301\007\000\000\000\000\000\000\257\003\000\000\000\000\000\000d\n\000\000\000\000\000\000\314\r\000\000\000\000\000\0000\000\000\000\000\000\000\000p\004\000\000\000\000\000\000\023\006\000\000\000\000\000\000L\001\000\000\000\000\000\000\272\000\000\000\000\000\000\000\314\030\000\000\000\000\000\000\\\000\000\000\000\000\000\000l\000\000\000\000\000\000\000X\000\000\000\000\000\000\000j\000\000\000\000\000\000\000l\000\000\000\000\000\000\000Q\005\000\000\000\000\000\000s\243\000\000\000\000\000\000\032\001\000\000\000\000\000\000IW\000\000\000\000\000\000\217\003\000\000\000\000\000\000/\002\000\000\000\000\000\000\031\002\000\000\000\000\000\000\035!\000\000\000\000\000\000\037\002\000\000\000\000\000\000\016\000\000\000\000\000\000\000+\000\000\000\000\000\000\000i\000\000\000\000\000\000\000\246\022\000\000\000\000\000\000\341\001\000\000\000\000\000\000\006\000\000\000\000\000\000\0005\000\000\000\000\000\000\0006\006\000\000\000\000\000\0007\000\000\000\000\000\000\000\206\001\000\000\000\000\000\000\213\000\000\000\000\000\000\000\006\002\000\000\000\000\000\000k\001\000\000\000\000\000\000\034\245\000\000\000\000\000\000\366\007\000\000\000\000\000\000\345;\000\000\000\000\000\000\r\000\000\000\000\000\000\000,\001\000\000\000\000\000\000@\000\000\000\000\000\000\000\r\007\000\000\000\000\000\000\rr*\000\000\000\000\000\000p\000\000\000\000\000\000\000\364\000\000\000\000\000\000\000\215O\000\000\000\000\000\000\347\000\000\000\000\000\000\000\203\002\000\000\000\000\000\000-\001\000\000\000\000\000\000\207\002\000\000\000\000\000\000\345\000\000\000\000\000\000\0003\000\000\000\000\000\000\000K\000\000\000\000\000\000\000\320,\000\000\000\000\000\000$\005\000\000\000\000\000\000\364\002\000\000\000\000\000\000\343\000\000\000\000\000\000\000\205\003\000\000\000\000\000\000C\000\000\000\000\000\000\000\375\001\000\000\000\000\000\000\215\033\000\000\000\000\000\0005\000\000\000\000\000\000\000z\000\000\000\000\000\000\000\367\000\000\000\000\000\000\000e\001\000\000\000\000\000\000m\000\000\000\000\000\000\0008\202\000\000\000\000\000\000L\000\000\000\000\000\000\000,\000\000\000\000\000\000\000\006%\000\000\000\000\000\000\245\001\000\000\000\000\000\000\334\014\000\000\000\000\000\000;\013\000\000\000\000\000\000\216_\000\000\000\000\000\000\251\001\000\000\000\000\000\000\034\000\000\000\000\000\000\000\355\001\000\000\000\000\000\000\344\000\000\000\000\000\000\000\274\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000L\002\000\000\000\000\000\000\027\r\000\000\000\000\000\000h\000\000\000\000\000\000\000\224\002\000\000\000\000\000\000\023\004\000\000\000\000\000\000\n\017\000\000\000\000\000\000A\000\000\000\000\000\000\0004\000\000\000\000\000\000\000s\005\000\000\000\000\000\000a\001\000\000\000\000\000\000\035\000\000\000\000\000\000\000w\002\000\000\000\000\000\000\260\000\000\000\000\000\000\000\277\003\000\000\000\000\000\000\341\007\000\000\000\000\000\000m\002\000\000\000\000\000\000\354\001\000\000\000\000\000\000]\000\000\000\000\000\000\000\230\000\000\000\000\000\000\000\200\007\000\000\000\000\000\000/\000\000\000\000\000\000\000\277\010\000\000\000\000\000\000B\001\000\000\000\000\000\000\345\000\000\000\000\000\000\000\034\005\000\000\000\000\000\000B\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\210\003\000\000\000\000\000\000\202\002\000\000\000\000\000\000\272\002\000\000\000\000\000\000H\000\000\000\000\000\000\000h\000\000\000\000\000\000\000\337\014\000\000\000\000\000\000\326\002\000\000\000\000\000\000\001\006\000\000\000\000\000\000\001\000\000\000\000\000\000\000\313\000\000\000\000\000\000\000\027\021\000\000\000\000\000\000)f\000\000\000\000\000\000\201\002\000\000\000\000\000\000\311\003\000\000\000\000\000\000\320\000\000\000\000\000\000\000I\001\000\000\000\000\000\000\304\\\000\000\000\000\000\000\240\003\000\000\000\000\000\000Z\000\000\000\000\000\000\000\3455\000\000\000\000\000\000\001\001\000\000\000\000\000\000\343\232\000\000\000\000\000\000@\001\000\000\000\000\000\000\322\004\000\000\000\000\000\000x\000\000\000\000\000\000\000\334\033\000\000\000\000\000\000\241\000\000\000\000\000\000\000\341\007\000\000\000\000\000\000\263\000\000\000\000\000\000\000F\000\000\000\000\000\000\000\307\000\000\000\000\000\000\000z\000\000\000\000\000\000\000\316\003\000\000\000\000\000\000\310\002\000\000\000\000\000\000\261\002\000\000\000\000\000\000\243\001\000\000\000\000\000\000\323\000\000\000\000\000\000\000\035\004\000\000\000\000\000\000e\000\000\000\000\000\000\000\254\000\000\000\000\000\000\000(\001\000\000\000\000\000\000|\003\000\000\000\000\000\0004\000\000\000\000\000\000\000n\025\000\000\000\000\000\0007\000\000\000\000\000\000\000\307\002\000\000\000\000\000\000\246\001\000\000\000\000\000\000+\003\000\000\000\000\000\000\377\377\377\377\377\377\377\377\277\001\000\000\000\000\000\000\320&\000\000\000\000\000\000\204\000\000\000\000\000\000\000f\024\000\000\000\000\000\000}\000\000\000\000\000\000\000\361\004\000\000\000\000\000\000\332\003\000\000\000\000\000\000`\000\000\000\000\000\000\000:\000\000\000\000\000\000\000\315\004\000\000\000\000\000\000B\000\000\000\000\000\000\000\032\010\000\000\000\000\000\000Z\013\000\000\000\000\000\000\312\001\000\000\000\000\000\000R=\000\000\000\000\000\000\346\000\000\000\000\000\000\000\206\000\000\000\000\000\000\000z\000\000\000\000\000\000\0000\001\000\000\000\000\000\000|\001\000\000\000\000\000\0008\000\000\000\000\000\000\000\220\001\000\000\000\000\000\000\230\000\000\000\000\000\000\000X\000\000\000\000\000\000\000d`\000\000\000\000\000\000\000+\007\000\000\000\000\000\000\300\003\000\000\000\000\000\000u\227\000\000\000\000\000\0007\013\000\000\000\000\000\000\313\005\000\000\000\000\000\000\234\002\000\000\000\000\000\000\203\005\000\000\000\000\000\000X\001\000\000\000\000\000\000@\006\000\000\000\000\000\000V\233\000\000\000\000\000\000\247\010\000\000\000\000\000\000l\000\000\000\000\000\000\000\257\000\000\000\000\000\000\000C\010\000\000\000\000\000\000\326\013\000\000\000\000\000\000\032\000\000\000\000\000\000\000\264\004\000\000\000\000\000\0006\000\000\000\000\000\000\000j\001\000\000\000\000\000\000,\002\000\000\000\000\000\000j\000\000\000\000\000\000\000\331=\000\000\000\000\000\000O\001\000\000\000\000\000\0005\000\000\000\000\000\000\000\033\022\000\000\000\000\000\000z\001\000\000\000\000\000\000f\005\000\000\000\000\000\000\350\001\000\000\000\000\000\000n\001\000\000\000\000\000\0008\000\000\000\000\000\000\000r\000\000\000\000\000\000\000\273\000\000\000\000\000\000\000\333\000\000\000\000\000\000\000G\003\000\000\000\000\000\000-\002\000\000\000\000\000\000\"\003\000\000\000\000\000\000z\001\000\000\000\000\000\000\333\001\000\000\000\000\000\000G\t\000\000\000\000\000\0000\000\000\000\000\000\000\0003\000\000\000\000\000\000\000\255D\000\000\000\000\000\000\352\000\000\000\000\000\000\000D\001\000\000\000\000\000\000\257\004\000\000\000\000\000\000v\'\000\000\000\000\000\000@\000\000\000\000\000\000\000.\001\000\000\000\000\000\000B\001\000\000\000\000\000\000)\024\000\000\000\000\000\000\215\001\000\000\000\000\000\000L\001\000\000\000\000\000\000\230\n\000\000\000\000\000\000\227\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000g\004\000\000\000\000\000\0006\002\000\000\000\000\000\000\211\000\000\000\000\000\000\000U\000\000\000\000\000\000\000\231\032\000\000\000\000\000\000\231\001\000\000\000\000\000\000x\003\000\000\000\000\000\000.\002\000\000\000\000\000\000\225\000\000\000\000\000\000\000 \000\000\000\000\000\000\000s\000\000\000\000\000\000\000\356\000\000\000\000\000\000\000\007,\000\000\000\000\000\000.\000\000\000\000\000\000\000\230\000\000\000\000\000\000\000\003\002\000\000\000\000\000\000\224\000\000\000\000\000\000\000*\005\000\000\000\000\000\000t\001\000\000\000\000\000\000\232\000\000\000\000\000\000\000Z\001\000\000\000\000\000\000\212\002\000\000\000\000\000\000\270\001\000\000\000\000\000\000T\n\000\000\000\000\000\000\214\005\000\000\000\000\000\000Y\001\000\000\000\000\000\000\250\000\000\000\000\000\000\0007\000\000\000\000\000\000\000\033\000\000\000\000\000\000\0000\004\000\000\000\000\000\000\207\000\000\000\000\000\000\000\253\000\000\000\000\000\000\0001\010\000\000\000\000\000\000\035\000\000\000\000\000\000\0001\023\000\000\000\000\000\000D\000\000\000\000\000\000\000{\001\000\000\000\000\000\000F\000\000\000\000\000\000\000\025\004\000\000\000\000\000\000\266\000\000\000\000\000\000\000\371\000\000\000\000\000\000\000\310\002\000\000\000\000\000\000\301\010\000\000\000\000\000\000\211\000\000\000\000\000\000\000 \000\000\000\000\000\000\000WQ\000\000\000\000\000\000_T\000\000\000\000\000\000b\000\000\000\000\000\000\0002\002\000\000\000\000\000\000\024\001\000\000\000\000\000\000~\001\000\000\000\000\000\000\302\032\000\000\000\000\000\000\215\000\000\000\000\000\000\000MH\000\000\000\000\000\000;\000\000\000\000\000\000\000x\017\000\000\000\000\000\000K\000\000\000\000\000\000\000\250\010\000\000\000\000\000\000S\000\000\000\000\000\000\000\370\001\000\000\000\000\000\000a\001\000\000\000\000\000\000\276\000\000\000\000\000\000\000\025\013\000\000\000\000\000\0007\000\000\000\000\000\000\000\373\264\000\000\000\000\000\000\351\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000`\000\000\000\000\000\000\000\346\001\000\000\000\000\000\000\236%\000\000\000\000\000\000k\002\000\000\000\000\000\000m\005\000\000\000\000\000\000}\002\000\000\000\000\000\000J\n\000\000\000\000\000\0002\000\000\000\000\000\000\0006\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\214\001\000\000\000\000\000\000\271\000\000\000\000\000\000\000\372\001\000\000\000\000\000\000c\001\000\000\000\000\000\000\360\001\000\000\000\000\000\000q\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000&\003\000\000\000\000\000\000\251\000\000\000\000\000\000\000o\000\000\000\000\000\000\0002\t\000\000\000\000\000\000\013\000\000\000\000\000\000\000\233\272\002\000\000\000\000\000\227(\000\000\000\000\000\000\362\005\000\000\000\000\000\000;\005\000\000\000\000\000\000\345\001\000\000\000\000\000\000\347R\000\000\000\000\000\000\203\001\000\000\000\000\000\000\253\000\000\000\000\000\000\000}\001\000\000\000\000\000\000b\000\000\000\000\000\000\0003\000\000\000\000\000\000\000\230\007\000\000\000\000\000\000\227\000\000\000\000\000\000\000\223\014\000\000\000\000\000\000\332\001\000\000\000\000\000\000l\000\000\000\000\000\000\000\357\002\000\000\000\000\000\000\341\001\000\000\000\000\000\0006\010\000\000\000\000\000\000Y\001\000\000\000\000\000\000>\002\000\000\000\000\000\000g\017\000\000\000\000\000\000\217\000\000\000\000\000\000\000\267\000\000\000\000\000\000\000w\016\000\000\000\000\000\000\346\000\000\000\000\000\000\000\374\000\000\000\000\000\000\000\"\023\000\000\000\000\000\000\256:\000\000\000\000\000\000\017\004\000\000\000\000\000\000\027\000\000\000\000\000\000\000\215\002\000\000\000\000\000\0000\000\000\000\000\000\000\000m\022\000\000\000\000\000\000(\000\000\000\000\000\000\000Z\023\000\000\000\000\000\000\226\000\000\000\000\000\000\000B\021\000\000\000\000\000\000\256\000\000\000\000\000\000\000\341\002\000\000\000\000\000\000u\020\000\000\000\000\000\000(\000\000\000\000\000\000\000\237\013\000\000\000\000\000\000\036\004\000\000\000\000\000\000\341\000\000\000\000\000\000\000z\000\000\000\000\000\000\000G\001\000\000\000\000\000\000B\002\000\000\000\000\000\000\357\001\000\000\000\000\000\000\033\000\000\000\000\000\000\000Y\000\000\000\000\000\000\000y\022\000\000\000\000\000\000\277\030\000\000\000\000\000\000\"\003\000\000\000\000\000\000o\002\000\000\000\000\000\000\237\000\000\000\000\000\000\000\355\036\000\000\000\000\000\000B\000\000\000\000\000\000\000\'\002\000\000\000\000\000\000\024\006\000\000\000\000\000\000\311\001\000\000\000\000\000\000\231\013\000\000\000\000\000\000\251\000\000\000\000\000\000\000\312\004\000\000\000\000\000\000\250\000\000\000\000\000\000\000\203\003\000\000\000\000\000\0005\000\000\000\000\000\000\000\"\n\000\000\000\000\000\000\211-\000\000\000\000\000\000&\000\000\000\000\000\000\000\242\024\000\000\000\000\000\0008\000\000\000\000\000\000\000\377\377\377\377\377\377\377\377\324\000\000\000\000\000\000\000\272\004\000\000\000\000\000\000;\000\000\000\000\000\000\000\370\000\000\000\000\000\000\000C\000\000\000\000\000\000\000,n\002\000\000\000\000\000\376\000\000\000\000\000\000\000\005\001\000\000\000\000\000\000\206\002\000\000\000\000\000\000\360\037\000\000\000\000\000\000\002\001\000\000\000\000\000\000\240\000\000\000\000\000\000\000\361\032\000\000\000\000\000\000T\001\000\000\000\000\000\000\247\000\000\000\000\000\000\000ouj\005\000\000\000\000\000\000V\000\000\000\000\000\000\000#\001\000\000\000\000\000\000\010\004\000\000\000\000\000\000\266\010\000\000\000\000\000\000{%\000\000\000\000\000\000\016\000\000\000\000\000\000\000!\007\000\000\000\000\000\000\260\000\000\000\000\000\000\000\n\220\000\000\000\000\000\000\236\001\000\000\000\000\000\000\025\001\000\000\000\000\000\000B\002\000\000\000\000\000\000\013\001\000\000\000\000\000\000\300\006\000\000\000\000\000\000?\001\000\000\000\000\000\000\303\000\000\000\000\000\000\0003\005\000\000\000\000\000\0007\000\000\000\000\000\000\0004\000\000\000\000\000\000\000l\000\000\000\000\000\000\000\352\021\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "tensors/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1192
          }
        }
        tensor_content: "d\002\000\000\000\000\000\000\254\021\000\000\000\000\000\000I\035\000\000\000\000\000\000<\000\000\000\000\000\000\000\322\003\000\000\000\000\000\000z\000\000\000\000\000\000\000\221\001\000\000\000\000\000\000\372\n\000\000\000\000\000\0000\035\000\000\000\000\000\0002\000\000\000\000\000\000\000\331\002\000\000\000\000\000\000\316\001\000\000\000\000\000\000\222\001\000\000\000\000\000\000\252\021\000\000\000\000\000\000\311\001\000\000\000\000\000\000\240\023\000\000\000\000\000\000\277\000\000\000\000\000\000\000\334\n\000\000\000\000\000\000G\001\000\000\000\000\000\000\014\001\000\000\000\000\000\000n\000\000\000\000\000\000\000\037\010\000\000\000\000\000\000\221\030\000\000\000\000\000\000\177\001\000\000\000\000\000\000\340\000\000\000\000\000\000\000O\004\000\000\000\000\000\0006\016\000\000\000\000\000\000\254\004\000\000\000\000\000\000\000\003\000\000\000\000\000\000\026\001\000\000\000\000\000\000\217\003\000\000\000\000\000\000\343\034\000\000\000\000\000\000\213\025\000\000\000\000\000\000\n\002\000\000\000\000\000\000\345\023\000\000\000\000\000\000\035\000\000\000\000\000\000\000\204\002\000\000\000\000\000\000\277\002\000\000\000\000\000\000i\035\000\000\000\000\000\000V\003\000\000\000\000\000\000\036\003\000\000\000\000\000\000\252\000\000\000\000\000\000\000\237\020\000\000\000\000\000\000:\005\000\000\000\000\000\000\246\002\000\000\000\000\000\000\200\001\000\000\000\000\000\000x\001\000\000\000\000\000\000[\000\000\000\000\000\000\000\276\n\000\000\000\000\000\000\273\032\000\000\000\000\000\000\307\001\000\000\000\000\000\000s\n\000\000\000\000\000\0003\000\000\000\000\000\000\000-\000\000\000\000\000\000\000K\035\000\000\000\000\000\000D\000\000\000\000\000\000\000\317\000\000\000\000\000\000\000G\023\000\000\000\000\000\000\002\004\000\000\000\000\000\000/\000\000\000\000\000\000\000\013\003\000\000\000\000\000\000\302\002\000\000\000\000\000\000\014\001\000\000\000\000\000\000\311\000\000\000\000\000\000\000\201\r\000\000\000\000\000\000\270\010\000\000\000\000\000\0008\035\000\000\000\000\000\000!\001\000\000\000\000\000\000\243\002\000\000\000\000\000\000\276\031\000\000\000\000\000\000I\002\000\000\000\000\000\000\t\001\000\000\000\000\000\000d\003\000\000\000\000\000\000\371\023\000\000\000\000\000\000\203\007\000\000\000\000\000\0001\000\000\000\000\000\000\000\377\377\377\377\377\377\377\377\261\003\000\000\000\000\000\000\256\000\000\000\000\000\000\000\266\000\000\000\000\000\000\000\264\002\000\000\000\000\000\000g\004\000\000\000\000\000\000\241\001\000\000\000\000\000\000\345\030\000\000\000\000\000\000\261\000\000\000\000\000\000\000\274\000\000\000\000\000\000\000]\006\000\000\000\000\000\000\376\033\000\000\000\000\000\000?\001\000\000\000\000\000\000\362\n\000\000\000\000\000\000\030\016\000\000\000\000\000\000\277\n\000\000\000\000\000\000\027\033\000\000\000\000\000\000\252\034\000\000\000\000\000\000\356\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\037\r\000\000\000\000\000\000M\035\000\000\000\000\000\000\032\023\000\000\000\000\000\000(\001\000\000\000\000\000\000\361\001\000\000\000\000\000\000\227\021\000\000\000\000\000\000#\000\000\000\000\000\000\000\326\017\000\000\000\000\000\000\264\001\000\000\000\000\000\000\\\000\000\000\000\000\000\000J\034\000\000\000\000\000\000\346\000\000\000\000\000\000\000\372\006\000\000\000\000\000\000\335\007\000\000\000\000\000\000A\001\000\000\000\000\000\000\324\005\000\000\000\000\000\000u\000\000\000\000\000\000\000\\\013\000\000\000\000\000\000\226\004\000\000\000\000\000\000\324\r\000\000\000\000\000\000\257\001\000\000\000\000\000\000\025\010\000\000\000\000\000\000&\026\000\000\000\000\000\000\370\020\000\000\000\000\000\000`\002\000\000\000\000\000\000g\002\000\000\000\000\000\000\352\026\000\000\000\000\000\000\350\000\000\000\000\000\000\000\016\030\000\000\000\000\000\000\215\002\000\000\000\000\000\000<\001\000\000\000\000\000\000a\001\000\000\000\000\000\000\221\026\000\000\000\000\000\000p\000\000\000\000\000\000\000S\014\000\000\000\000\000\000\006\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\233\000\000\000\000\000\000\000\277\033\000\000\000\000\000\000\210\023\000\000\000\000\000\000S\000\000\000\000\000\000\000\317\013\000\000\000\000\000\000\264\002\000\000\000\000\000\000s\020\000\000\000\000\000\000\365\030\000\000\000\000\000\000\230\007\000\000\000\000\000\000\007\001\000\000\000\000\000\000\033\000\000\000\000\000\000\0007\004\000\000\000\000\000\000)\002\000\000\000\000\000\000\010\r\000\000\000\000\000\000\272\002\000\000\000\000\000\000\256\005\000\000\000\000\000\000\361\000\000\000\000\000\000\000\321\002\000\000\000\000\000\000\014\000\000\000\000\000\000\000\343\025\000\000\000\000\000\000\367\001\000\000\000\000\000\000a\000\000\000\000\000\000\0000\000\000\000\000\000\000\000f\003\000\000\000\000\000\000\032\002\000\000\000\000\000\000\214\000\000\000\000\000\000\000\257\032\000\000\000\000\000\000\200\000\000\000\000\000\000\000\203\002\000\000\000\000\000\000\326\000\000\000\000\000\000\000\214\000\000\000\000\000\000\000\342\034\000\000\000\000\000\0005\007\000\000\000\000\000\0002\001\000\000\000\000\000\000\243\000\000\000\000\000\000\000K\000\000\000\000\000\000\000,\000\000\000\000\000\000\000\274\000\000\000\000\000\000\000v\007\000\000\000\000\000\000N\027\000\000\000\000\000\000\330\020\000\000\000\000\000\000\365\000\000\000\000\000\000\000\253\002\000\000\000\000\000\000n\001\000\000\000\000\000\000\335\001\000\000\000\000\000\000\257\034\000\000\000\000\000\000\023\000\000\000\000\000\000\000\343\003\000\000\000\000\000\000\356\001\000\000\000\000\000\000\202\000\000\000\000\000\000\000\177\004\000\000\000\000\000\000\224\005\000\000\000\000\000\0003\010\000\000\000\000\000\000~\000\000\000\000\000\000\000\322\000\000\000\000\000\000\000\007\002\000\000\000\000\000\000\263\000\000\000\000\000\000\000\227\003\000\000\000\000\000\000-\r\000\000\000\000\000\000\322\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\207\001\000\000\000\000\000\000r\004\000\000\000\000\000\000\336\000\000\000\000\000\000\000C\035\000\000\000\000\000\000i\013\000\000\000\000\000\000\000\001\000\000\000\000\000\000\264\000\000\000\000\000\000\000\305\003\000\000\000\000\000\000\273\001\000\000\000\000\000\000a\017\000\000\000\000\000\000\312\002\000\000\000\000\000\000\301\001\000\000\000\000\000\000\312\031\000\000\000\000\000\000\325\027\000\000\000\000\000\000\002\000\000\000\000\000\000\000\264\014\000\000\000\000\000\000\317\023\000\000\000\000\000\000{\006\000\000\000\000\000\000{\000\000\000\000\000\000\000\244\023\000\000\000\000\000\000R\001\000\000\000\000\000\000\247\001\000\000\000\000\000\000z\002\000\000\000\000\000\0007\000\000\000\000\000\000\000\377\377\377\377\377\377\377\377\320\001\000\000\000\000\000\000.\035\000\000\000\000\000\000\\\017\000\000\000\000\000\000\350\034\000\000\000\000\000\000\210\000\000\000\000\000\000\000G\002\000\000\000\000\000\000\217\007\000\000\000\000\000\000\'\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\375\001\000\000\000\000\000\000\240\002\000\000\000\000\000\000a\006\000\000\000\000\000\0000\035\000\000\000\000\000\000\253\010\000\000\000\000\000\000\324\010\000\000\000\000\000\000B\024\000\000\000\000\000\000a\013\000\000\000\000\000\000\200\001\000\000\000\000\000\000\236\000\000\000\000\000\000\000&\000\000\000\000\000\000\000b\001\000\000\000\000\000\000b\000\000\000\000\000\000\000z\000\000\000\000\000\000\000/\002\000\000\000\000\000\000\002\002\000\000\000\000\000\0005\001\000\000\000\000\000\000\024\016\000\000\000\000\000\000\222\006\000\000\000\000\000\000\351\001\000\000\000\000\000\000g\004\000\000\000\000\000\000\000\013\000\000\000\000\000\000\305\010\000\000\000\000\000\000\233\001\000\000\000\000\000\000H\001\000\000\000\000\000\000\341\005\000\000\000\000\000\000<\000\000\000\000\000\000\0001\014\000\000\000\000\000\000\032\r\000\000\000\000\000\000=\002\000\000\000\000\000\000O\023\000\000\000\000\000\000\310\000\000\000\000\000\000\000\333\006\000\000\000\000\000\000\305\001\000\000\000\000\000\000\037\000\000\000\000\000\000\000\246\004\000\000\000\000\000\000q\007\000\000\000\000\000\000\003\000\000\000\000\000\000\000>\003\000\000\000\000\000\000r\003\000\000\000\000\000\000M\000\000\000\000\000\000\000\273\032\000\000\000\000\000\000a\002\000\000\000\000\000\000`\000\000\000\000\000\000\000^\004\000\000\000\000\000\000\253\033\000\000\000\000\000\000m\003\000\000\000\000\000\000\356\007\000\000\000\000\000\000F\002\000\000\000\000\000\000\254\001\000\000\000\000\000\000\034\000\000\000\000\000\000\000F\n\000\000\000\000\000\000\276\000\000\000\000\000\000\000\231\001\000\000\000\000\000\000_\013\000\000\000\000\000\000R\r\000\000\000\000\000\000\357\002\000\000\000\000\000\000\277\005\000\000\000\000\000\000T\003\000\000\000\000\000\000\243\016\000\000\000\000\000\000%\001\000\000\000\000\000\000\306\032\000\000\000\000\000\000}\000\000\000\000\000\000\000\352\027\000\000\000\000\000\000\324\033\000\000\000\000\000\000S\r\000\000\000\000\000\000d\001\000\000\000\000\000\000R\035\000\000\000\000\000\000\025\000\000\000\000\000\000\000\016\ta\002\000\000\000\000\000\000e\n\000\000\000\000\000\000\265\000\000\000\000\000\000\000\r\001\000\000\000\000\000\000\205\t\000\000\000\000\000\000\224\000\000\000\000\000\000\000\332\004\000\000\000\000\000\000G\002\000\000\000\000\000\000\332\n\000\000\000\000\000\000\232\002\000\000\000\000\000\000\262\016\000\000\000\000\000\000|\006\000\000\000\000\000\000\261\014\000\000\000\000\000\000\006\000\000\000\000\000\000\000zv\034\000\000\000\000\000\000\325\000\000\000\000\000\000\000\003\n\000\000\000\000\000\000\002\002\000\000\000\000\000\000\243\003\000\000\000\000\000\000\033\010\000\000\000\000\000\000=\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000d\005\000\000\000\000\000\000\265\001\000\000\000\000\000\000\360\016\000\000\000\000\000\0004\007\000\000\000\000\000\000\007\027\000\000\000\000\000\000\314\001\000\000\000\000\000\000*\014\000\000\000\000\000\000b\002\000\000\000\000\000\000L\035\000\000\000\000\000\000\325\013\000\000\000\000\000\000g\001\000\000\000\000\000\000\210\006\000\000\000\000\000\000\037\003\000\000\000\000\000\000\351\034\000\000\000\000\000\000\226\001\000\000\000\000\000\000\347\025\000\000\000\000\000\000jt\001\000\000\000\000\000\000\321\002\000\000\000\000\000\000k\000\000\000\000\000\000\000h\010\000\000\000\000\000\000E\000\000\000\000\000\000\000\324\000\000\000\000\000\000\000\233\000\000\000\000\000\000\000\005\003\000\000\000\000\000\000H\000\000\000\000\000\000\000\206\001\000\000\000\000\000\000\216\001\000\000\000\000\000\000\375\006\000\000\000\000\000\000\373\000\000\000\000\000\000\0003\034\000\000\000\000\000\000J\001\000\000\000\000\000\000\371\000\000\000\000\000\000\000d\000\000\000\000\000\000\000\264\001\000\000\000\000\000\000\356\000\000\000\000\000\000\000\t\004\000\000\000\000\000\000\217\014\000\000\000\000\000\000Y\000\000\000\000\000\000\000\265\002\000\000\000\000\000\000\366\034\000\000\000\000\000\000\307\007\000\000\000\000\000\000\225\001\000\000\000\000\000\000m\000\000\000\000\000\000\000Q\035\000\000\000\000\000\000\357\007\000\000\000\000\000\000-\000\000\000\000\000\000\000#\000\000\000\000\000\000\000M\002\000\000\000\000\000\000%\003\000\000\000\000\000\000\243\024\000\000\000\000\000\000d\001\000\000\000\000\000\000\007\001\000\000\000\000\000\000?\000\000\000\000\000\000\000\326\034\000\000\000\000\000\0004\006\000\000\000\000\000\000\271\001\000\000\000\000\000\000\276\001\000\000\000\000\000\000U\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000)\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\256\r\000\000\000\000\000\000\303\006\000\000\000\000\000\000Q\035\000\000\000\000\000\000\224\000\000\000\000\000\000\000\310\000\000\000\000\000\000\000#\000\000\000\000\000\000\000\263\r\000\000\000\000\000\000p\032\000\000\000\000\000\000\034\014\000\000\000\000\000\000\241\003\000\000\000\000\000\000\264\010\000\000\000\000\000\000\006\025\000\000\000\000\000\000G\003\000\000\000\000\000\000i\027\000\000\000\000\000\000J\t\000\000\000\000\000\000\017\002\000\000\000\000\000\0002\000\000\000\000\000\000\000 \010\000\000\000\000\000\000\267\003\000\000\000\000\000\000\307\002\000\000\000\000\000\000\211\017\000\000\000\000\000\000h\006\000\000\000\000\000\0000\000\000\000\000\000\000\000\360\000\000\000\000\000\000\000\350\031\000\000\000\000\000\000|\033\000\000\000\000\000\000\204\000\000\000\000\000\000\000_\000\000\000\000\000\000\000\002\002\000\000\000\000\000\000\024\022\000\000\000\000\000\000\034\000\000\000\000\000\000\000\327\035\000\000\000\000\000\000\232\000\000\000\000\000\000\000:\000\000\000\000\000\000\000\032\022\000\000\000\000\000\000[\035\000\000\000\000\000\000f\004\000\000\000\000\000\000\310\002\000\000\000\000\000\000\003\006\000\000\000\000\000\000\022\000\000\000\000\000\000\000\\\000\000\000\000\000\000\000\007\034\000\000\000\000\000\000\034\001\000\000\000\000\000\000k\002\000\000\000\000\000\000\327\000\000\000\000\000\000\000C\001\000\000\000\000\000\000\335\000\000\000\000\000\000\000\305\n\000\000\000\000\000\000\313\004\000\000\000\000\000\000\305\000\000\000\000\000\000\000L\006\000\000\000\000\000\000\211\002\000\000\000\000\000\000}\001\000\000\000\000\000\000\014\026\000\000\000\000\000\000\317\014\000\000\000\000\000\000\231\n\000\000\000\000\000\000\374\001\000\000\000\000\000\000s\025\000\000\000\000\000\000\034\024\000\000\000\000\000\000\252\002\000\000\000\000\000\000u\023\000\000\000\000\000\000\"\034\000\000\000\000\000\000\361\000\000\000\000\000\000\000<\004\000\000\000\000\000\000@\005\000\000\000\000\000\000#\002\000\000\000\000\000\000\317\021\000\000\000\000\000\000\273\002\000\000\000\000\000\000\365\003\000\000\000\000\000\000\360\032\000\000\000\000\000\000\200\002\000\000\000\000\000\000\221\001\000\000\000\000\000\000\026\000\000\000\000\000\000\000\177\000\000\000\000\000\000\000b\022\000\000\000\000\000\000D\021\000\000\000\000\000\000g\000\000\000\000\000\000\000\024\003\000\000\000\000\000\000\377\377\377\377\377\377\377\377$\001\000\000\000\000\000\000\033\001\000\000\000\000\000\000H\001\000\000\000\000\000\000\022\000\000\000\000\000\000\000\355\003\000\000\000\000\000\000\005\000\000\000\000\000\000\000\351\002\000\000\000\000\000\000\316\021\000\000\000\000\000\000\005\000\000\000\000\000\000\000v\006\000\000\000\000\000\000\364\002\000\000\000\000\000\000\215\000\000\000\000\000\000\000(\005\000\000\000\000\000\000\335\002\000\000\000\000\000\000\017\006\000\000\000\000\000\000F\034\000\000\000\000\000\000\213\000\000\000\000\000\000\000C\001\000\000\000\000\000\000\205\000\000\000\000\000\000\000E\000\000\000\000\000\000\0003\000\000\000\000\000\000\000\307\004\000\000\000\000\000\000\200\007\000\000\000\000\000\000\024\t\000\000\000\000\000\000\233\n\000\000\000\000\000\000\010\000\000\000\000\000\000\000\016\017\000\000\000\000\000\000\362\000\000\000\000\000\000\000\023\001\000\000\000\000\000\000R\001\000\000\000\000\000\000\220\005\000\000\000\000\000\000Z\000\000\000\000\000\000\000y\004\000\000\000\000\000\0005\000\000\000\000\000\000\000\306\000\000\000\000\000\000\0004\022\000\000\000\000\000\000\240\005\000\000\000\000\000\000\"\023\000\000\000\000\000\000:\000\000\000\000\000\000\000\360\000\000\000\000\000\000\000h\000\000\000\000\000\000\000e\004\000\000\000\000\000\000\261\000\000\000\000\000\000\000A\001\000\000\000\000\000\000\312\003\000\000\000\000\000\000E\006\000\000\000\000\000\000q\001\000\000\000\000\000\000a\002\000\000\000\000\000\000\321\005\000\000\000\000\000\000\322\031\000\000\000\000\000\000\310\000\000\000\000\000\000\000\245\002\000\000\000\000\000\000\002\000\000\000\000\000\000\000@\001\000\000\000\000\000\000@\017\000\000\000\000\000\000(\000\000\000\000\000\000\000\235\034\000\000\000\000\000\000\210\000\000\000\000\000\000\000h\002\000\000\000\000\000\000D\001\000\000\000\000\000\000L\035\000\000\000\000\000\000\357\n\000\000\000\000\000\000\320\002\000\000\000\000\000\000r\023\000\000\000\000\000\000\256\000\000\000\000\000\000\000\001\010\000\000\000\000\000\000\322\026\000\000\000\000\000\000\227\000\000\000\000\000\000\000\227\000\000\000\000\000\000\000\332\001\000\000\000\000\000\000\306\006\000\000\000\000\000\000$\032\000\000\000\000\000\000\223\002\000\000\000\000\000\000h\000\000\000\000\000\000\000~\001\000\000\000\000\000\000#\016\000\000\000\000\000\000\332\005\000\000\000\000\000\000~\000\000\000\000\000\000\000\331\020\000\000\000\000\000\000\r\000\000\000\000\000\000\000\354\001\000\000\000\000\000\000;\001\000\000\000\000\000\000g\001\000\000\000\000\000\000\307\024\000\000\000\000\000\000\020\000\000\000\000\000\000\000\r\020\000\000\000\000\000\000\250\014\000\000\000\000\000\000t\n\000\000\000\000\000\000\253\016\000\000\000\000\000\000E\023\000\000\000\000\000\000;\000\000\000\000\000\000\000\237\000\000\000\000\000\000\000\000\003\000\000\000\000\000\000\350\006\000\000\000\000\000\000Y\001\000\000\000\000\000\000@\001\000\000\000\000\000\000\254\n\000\000\000\000\000\000\256\000\000\000\000\000\000\000\023\004\000\000\000\000\000\000\220\003\000\000\000\000\000\000\024\004\000\000\000\000\000\000:\000\000\000\000\000\000\000k\000\000\000\000\000\000\000\326\001\000\000\000\000\000\000\301\000\000\000\000\000\000\000\350\000\000\000\000\000\000\000\020\001\000\000\000\000\000\000!\023\000\000\000\000\000\000 \000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\021\000\000\000\000\000\000\0004\002\000\000\000\000\000\000r\r\000\000\000\000\000\000h\002\000\000\000\000\000\000\005\002\000\000\000\000\000\000h\006\000\000\000\000\000\000\232\003\000\000\000\000\000\000\244\000\000\000\000\000\000\000(\005\000\000\000\000\000\000\204\003\000\000\000\000\000\000\205\000\000\000\000\000\000\000\347\002\000\000\000\000\000\000\t\000\000\000\000\000\000\000\232\003\000\000\000\000\000\000\010\010\000\000\000\000\000\000s\001\000\000\000\000\000\000\307\010\000\000\000\000\000\000]\031\000\000\000\000\000\000y\003\000\000\000\000\000\000\366\000\000\000\000\000\000\000\217\033\000\000\000\000\000\000\327\001\000\000\000\000\000\000q\003\000\000\000\000\000\000\307\031\000\000\000\000\000\000o\n\000\000\000\000\000\000\017\000\000\000\000\000\000\000H\n\000\000\000\000\000\000?\014\000\000\000\000\000\000\364\000\000\000\000\000\000\000\331\000\000\000\000\000\000\000B\003\000\000\000\000\000\000\253\000\000\000\000\000\000\000r\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000^\000\000\000\000\000\000\000<\001\000\000\000\000\000\000\220\016\000\000\000\000\000\000\311\002\000\000\000\000\000\000`d\001\000\000\000\000\000\000\324\013\000\000\000\000\000\000b\021\000\000\000\000\000\0005\006\000\000\000\000\000\000\014\000\000\000\000\000\000\000\207\001\000\000\000\000\000\000\230\001\000\000\000\000\000\000\352\003\000\000\000\000\000\000\265\t\000\000\000\000\000\000\375\002\000\000\000\000\000\000 \000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\235\002\000\000\000\000\000\000\203\t\000\000\000\000\000\000\361\t\000\000\000\000\000\000_\000\000\000\000\000\000\000\355\007\000\000\000\000\000\000\271\n\000\000\000\000\000\000\310\014\000\000\000\000\000\000h\004\000\000\000\000\000\000h\001\000\000\000\000\000\000W\000\000\000\000\000\000\000\'\001\000\000\000\000\000\000\037\000\000\000\000\000\000\000\035\001\000\000\000\000\000\000\\\003\000\000\000\000\000\000d\001\000\000\000\000\000\000T\000\000\000\000\000\000\000\203\000\000\000\000\000\000\000\210\000\000\000\000\000\000\000\362\001\000\000\000\000\000\000\356\te\001\000\000\000\000\000\000\203\002\000\000\000\000\000\000\353\022\000\000\000\000\000\000q\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000[\021\000\000\000\000\000\000t\002\000\000\000\000\000\000@\010\000\000\000\000\000\000x\034\000\000\000\000\000\000\222\024\000\000\000\000\000\0004\001\000\000\000\000\000\000\020\000\000\000\000\000\000\000p\003\000\000\000\000\000\000+\001\000\000\000\000\000\000\226\001\000\000\000\000\000\000\003\000\000\000\000\000\000\000]\002\000\000\000\000\000\000\337\t\000\000\000\000\000\000S\000\000\000\000\000\000\000\236\003\000\000\000\000\000\000\177\000\000\000\000\000\000\000\377\004\000\000\000\000\000\000x\000\000\000\000\000\000\000J\000\000\000\000\000\000\000\002\004\000\000\000\000\000\000\220\004\000\000\000\000\000\000\n\000\000\000\000\000\000\000/\000\000\000\000\000\000\000a\002\000\000\000\000\000\000\251\007\000\000\000\000\000\000\306\010\000\000\000\000\000\000\367\t\000\000\000\000\000\000\002\006\000\000\000\000\000\000H\000\000\000\000\000\000\000\356\000\000\000\000\000\000\000\210\034\000\000\000\000\000\000\036\000\000\000\000\000\000\000\247\007\000\000\000\000\000\000<\001\000\000\000\000\000\000y\000\000\000\000\000\000\000\360\004\000\000\000\000\000\000\030\000\000\000\000\000\000\000C\000\000\000\000\000\000\000_\004\000\000\000\000\000\000\020\001\000\000\000\000\000\000M\005\000\000\000\000\000\000\312\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000`\024\000\000\000\000\000\000*\003\000\000\000\000\000\000\336\002\000\000\000\000\000\000\001\000\000\000\000\000\000\000\306\002\000\000\000\000\000\000\245\023\000\000\000\000\000\0004\014\000\000\000\000\000\000\210\003\000\000\000\000\000\0006\006\000\000\000\000\000\000E\001\000\000\000\000\000\000\353\001\000\000\000\000\000\000z\031\000\000\000\000\000\000H\n\000\000\000\000\000\000-\000\000\000\000\000\000\000\001\022\000\000\000\000\000\000\032\001\000\000\000\000\000\000\334\004\000\000\000\000\000\000\346\004\000\000\000\000\000\000\262\002\000\000\000\000\000\000\261\002\000\000\000\000\000\000\'\003\000\000\000\000\000\000y\002\000\000\000\000\000\000P\035\000\000\000\000\000\000\334\002\000\000\000\000\000\000x\000\000\000\000\000\000\000\301\001\000\000\000\000\000\000\353\000\000\000\000\000\000\000\243\024\000\000\000\000\000\000\251\002\000\000\000\000\000\000F\005\000\000\000\000\000\000\203\004\000\000\000\000\000\000)\001\000\000\000\000\000\000\343\006\000\000\000\000\000\000m\000\000\000\000\000\000\000m\000\000\000\000\000\000\000\341\000\000\000\000\000\000\000\205\021\000\000\000\000\000\000D\000\000\000\000\000\000\000m\014\000\000\000\000\000\000P\000\000\000\000\000\000\000O\t\000\000\000\000\000\000\"\n\000\000\000\000\000\000\345\001\000\000\000\000\000\000\377\377\377\377\377\377\377\377v\002\000\000\000\000\000\000\340\n\000\000\000\000\000\000\211\000\000\000\000\000\000\000\327\023\000\000\000\000\000\000\"\003\000\000\000\000\000\000\231\006\000\000\000\000\000\000\333\003\000\000\000\000\000\0004\002\000\000\000\000\000\000\021\000\000\000\000\000\000\0003\n\000\000\000\000\000\0006\000\000\000\000\000\000\000\276\006\000\000\000\000\000\000\377\010\000\000\000\000\000\000\267\000\000\000\000\000\000\000\014\035\000\000\000\000\000\000k\001\000\000\000\000\000\000p\000\000\000\000\000\000\000\262\000\000\000\000\000\000\000\205\002\000\000\000\000\000\000\255\004\000\000\000\000\000\000\"\000\000\000\000\000\000\000%\000\000\000\000\000\000\000u\000\000\000\000\000\000\000\207\000\000\000\000\000\000\0009\000\000\000\000\000\000\000\027\000\000\000\000\000\000\0008\000\000\000\000\000\000\000\242\034\000\000\000\000\000\000@\021\000\000\000\000\000\000L\000\000\000\000\000\000\000\263\001\000\000\000\000\000\000\322\006\000\000\000\000\000\000\336\007\000\000\000\000\000\000u\000\000\000\000\000\000\000\035\001\000\000\000\000\000\000#\016\000\000\000\000\000\000W\024\000\000\000\000\000\000\016\003\000\000\000\000\000\000\353\003\000\000\000\000\000\000\224\007\000\000\000\000\000\000\004\033\000\000\000\000\000\000\204\001\000\000\000\000\000\000\267\000\000\000\000\000\000\000\007\002\000\000\000\000\000\000t\n\000\000\000\000\000\000B\000\000\000\000\000\000\000\237\000\000\000\000\000\000\000\264\002\000\000\000\000\000\000\010\005\000\000\000\000\000\000\010\000\000\000\000\000\000\000#\006\000\000\000\000\000\000\276\002\000\000\000\000\000\0007\000\000\000\000\000\000\000d\007\000\000\000\000\000\000\032\020\000\000\000\000\000\000\217\n\000\000\000\000\000\000?\013\000\000\000\000\000\000\202\021\000\000\000\000\000\000\010\001\000\000\000\000\000\000@\033\000\000\000\000\000\000L\002\000\000\000\000\000\000\351\017\000\000\000\000\000\000Z\013\000\000\000\000\000\000#\016\000\000\000\000\000\000X\000\000\000\000\000\000\000o\004\000\000\000\000\000\000\016\020\000\000\000\000\000\000\\\005\000\000\000\000\000\000!\000\000\000\000\000\000\000\262\027\000\000\000\000\000\000l\000\000\000\000\000\000\000\007\001\000\000\000\000\000\000\305\004\000\000\000\000\000\000\304\000\000\000\000\000\000\000\226\034\000\000\000\000\000\000\330\000\000\000\000\000\000\000E\001\000\000\000\000\000\000\347\003\000\000\000\000\000\000\326\006\000\000\000\000\000\000\001\033\000\000\000\000\000\000\301\001\000\000\000\000\000\000+\002\000\000\000\000\000\000\030\000\000\000\000\000\000\0008\003\000\000\000\000\000\000\261\003\000\000\000\000\000\000b\002\000\000\000\000\000\000\002\022\000\000\000\000\000\000u\007\000\000\000\000\000\000\362\003\000\000\000\000\000\000W\004\000\000\000\000\000\000m\002\000\000\000\000\000\000S\030\000\000\000\000\000\000\031\000\000\000\000\000\000\000L\000\000\000\000\000\000\0001\031\000\000\000\000\000\000n\003\000\000\000\000\000\000\325\004\000\000\000\000\000\000\353\032\000\000\000\000\000\000\241\021\000\000\000\000\000\000\002\001\000\000\000\000\000\000?\001\000\000\000\000\000\000\362\006\000\000\000\000\000\000g\006\000\000\000\000\000\000s\000\000\000\000\000\000\000\237\005\000\000\000\000\000\000H\035\000\000\000\000\000\000\245\000\000\000\000\000\000\000\235\001\000\000\000\000\000\000A\034\000\000\000\000\000\000\357\001\000\000\000\000\000\000\227\000\000\000\000\000\000\000U\000\000\000\000\000\000\000<\022\000\000\000\000\000\000g\003\000\000\000\000\000\000\016\004\000\000\000\000\000\000\306\000\000\000\000\000\000\000\"\001\000\000\000\000\000\000\031\000\000\000\000\000\000\000\222\000\000\000\000\000\000\000\254\000\000\000\000\000\000\000l\006\000\000\000\000\000\000|\000\000\000\000\000\000\000\340\000\000\000\000\000\000\000\257\010\000\000\000\000\000\000\227\001\000\000\000\000\000\000K\035\000\000\000\000\000\000\223\004\000\000\000\000\000\000C\000\000\000\000\000\000\000\241\026\000\000\000\000\000\000\213\026\000\000\000\000\000\000T\001\000\000\000\000\000\000\r\005\000\000\000\000\000\0000\n|\001\000\000\000\000\000\000\222\001\000\000\000\000\000\000r\022\000\000\000\000\000\000\200\003\000\000\000\000\000\000\312\n\000\000\000\000\000\000\021\000\000\000\000\000\000\000Q\035\000\000\000\000\000\000\004\000\000\000\000\000\000\000\003\035\000\000\000\000\000\000\254\000\000\000\000\000\000\0007\002\000\000\000\000\000\000an\000\000\000\000\000\000E\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\343\006\000\000\000\000\000\000\311\000\000\000\000\000\000\0005\000\000\000\000\000\000\000T\035\000\000\000\000\000\000\010\000\000\000\000\000\000\000@\017\000\000\000\000\000\000\313\017\000\000\000\000\000\000T\035\000\000\000\000\000\000{\032\000\000\000\000\000\000\270\001\000\000\000\000\000\000\270\006\000\000\000\000\000\000\305\000\000\000\000\000\000\000\265\000\000\000\000\000\000\000\316\001\000\000\000\000\000\000:\000\000\000\000\000\000\000-\000\000\000\000\000\000\000\024\003\000\000\000\000\000\000R\001\000\000\000\000\000\000\333\024\000\000\000\000\000\000\t\003\000\000\000\000\000\000I\002\000\000\000\000\000\000\262\000\000\000\000\000\000\000\034\001\000\000\000\000\000\000K\017\000\000\000\000\000\000\325\001\000\000\000\000\000\000B\004\000\000\000\000\000\000J\035\000\000\000\000\000\000$\000\000\000\000\000\000\000\003\001\000\000\000\000\000\000\306\022\000\000\000\000\000\000i\000\000\000\000\000\000\000\316\000\000\000\000\000\000\000\304\026\000\000\000\000\000\000\014\031\000\000\000\000\000\000w\033\000\000\000\000\000\000A\000\000\000\000\000\000\000\210\001\000\000\000\000\000\000^\000\000\000\000\000\000\000W\016\000\000\000\000\000\000H\000\000\000\000\000\000\000N\035\000\000\000\000\000\000\214\001\000\000\000\000\000\000\276\002\000\000\000\000\000\000T\001\000\000\000\000\000\000\320\034\000\000\000\000\000\0006\002\000\000\000\000\000\000\013\000\000\000\000\000\000\000\240\003\000\000\000\000\000\000\273\025\000\000\000\000\000\000\242\000\000\000\000\000\000\000\335\000\000\000\000\000\000\000m\001\000\000\000\000\000\000\302\000\000\000\000\000\000\000\222\002\000\000\000\000\000\000\023\000\000\000\000\000\000\000W\000\000\000\000\000\000\000t\034\000\000\000\000\000\000\304\023\000\000\000\000\000\000F\002\000\000\000\000\000\000\030\002\000\000\000\000\000\000\304\000\000\000\000\000\000\000t\r\000\000\000\000\000\000\214\000\000\000\000\000\000\0004\005\000\000\000\000\000\000\031\016\000\000\000\000\000\000I\001\000\000\000\000\000\000\355\016\000\000\000\000\000\000\312\000\000\000\000\000\000\000\317\020\000\000\000\000\000\000\316\000\000\000\000\000\000\000\036\030\000\000\000\000\000\000\024\000\000\000\000\000\000\000L\035\000\000\000\000\000\000^\n\000\000\000\000\000\000/\000\000\000\000\000\000\000\006\035\000\000\000\000\000\000\r\000\000\000\000\000\000\000\377\377\377\377\377\377\377\377\320\001\000\000\000\000\000\000\202\002\000\000\000\000\000\000\270\000\000\000\000\000\000\000\353\000\000\000\000\000\000\0005\000\000\000\000\000\000\000s\013\000\000\000\000\000\000\236\003\000\000\000\000\000\000\330\000\000\000\000\000\000\000\236\003\000\000\000\000\000\000\256\030\000\000\000\000\000\000%\001\000\000\000\000\000\000\222\002\000\000\000\000\000\000\305\001\000\000\000\000\000\000\031\014\000\000\000\000\000\000\324\000\000\000\000\000\000\000e\000\000\000\000\000\000\000\262\003\000\000\000\000\000\000\013\001\000\000\000\000\000\000C\001\000\000\000\000\000\000\022\001\000\000\000\000\000\000\265\020\000\000\000\000\000\000I\002\000\000\000\000\000\000C\005\000\000\000\000\000\000$\003\000\000\000\000\000\000\213\017\000\000\000\000\000\000\037\004\000\000\000\000\000\000r\002\000\000\000\000\000\000s\003\000\000\000\000\000\000G\030\000\000\000\000\000\000)\032\000\000\000\000\000\000D\002\000\000\000\000\000\000P\000\000\000\000\000\000\000p\003\000\000\000\000\000\000\264\000\000\000\000\000\000\000V\002\000\000\000\000\000\000\312\003\000\000\000\000\000\000a\001\000\000\000\000\000\000:\000\000\000\000\000\000\000/\001\000\000\000\000\000\000\266\016\000\000\000\000\000\000\337\022\000\000\000\000\000\000\360\002\000\000\000\000\000\000\242\r\000\000\000\000\000\000\031\004\000\000\000\000\000\000\t\000\000\000\000\000\000\000\245\000\000\000\000\000\000\000.\004\000\000\000\000\000\000\300\026\000\000\000\000\000\000.\002\000\000\000\000\000\000\277\000\000\000\000\000\000\000w\001\000\000\000\000\000\000j\001\000\000\000\000\000\000\214\001\000\000\000\000\000\000\233\000\000\000\000\000\000\000\262\000\000\000\000\000\000\000\242\026\000\000\000\000\000\000\231\003\000\000\000\000\000\000\037\025\000\000\000\000\000\000\237\000\000\000\000\000\000\000\314\003\000\000\000\000\000\000\211\002\000\000\000\000\000\000\224\005\000\000\000\000\000\000\233\031\000\000\000\000\000\000|\000\000\000\000\000\000\000\262\001\000\000\000\000\000\0002\007\000\000\000\000\000\000\024\035\000\000\000\000\000\000\235\006\000\000\000\000\000\000\'\002\000\000\000\000\000\000\022\030\000\000\000\000\000\000b\000\000\000\000\000\000\000L\035\000\000\000\000\000\000\315\001\000\000\000\000\000\000\362\001\000\000\000\000\000\000\374\002\000\000\000\000\000\000\022\000\000\000\000\000\000\000\035\000\000\000\000\000\000\0005\000\000\000\000\000\000\000\035\023\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "tensors/component_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1192
          }
        }
        tensor_content: "\006\001\000\000\000\000\000\000\007\002\000\000\000\000\000\000\255\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\"\000\000\000\000\000\000\000\201\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000t\004\000\000\000\000\000\000tm\000\000\000\000\000\000\0005\000\000\000\000\000\000\000ad\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Z\002\000\000\000\000\000\000\035\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000+\013\000\000\000\000\000\000\207\002\000\000\000\000\000\000\025\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000x\000\000\000\000\000\000\000?\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000D\001\000\000\000\000\000\000$\000\000\000\000\000\000\000*\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\370\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\377\377\377\377\377\377\377\377\350\002\000\000\000\000\000\000\263\000\000\000\000\000\000\000:\000\000\000\000\000\000\000*\000\000\000\000\000\000\000b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000;\001\000\000\000\000\000\000\005\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000,\000\000\000\000\000\000\000)\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\t\006\000\000\000\000\000\000K\000\000\000\000\000\000\0005\000\000\000\000\000\000\000#\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\345\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000D\000\000\000\000\000\000\000\360\001\000\000\000\000\000\000a\003\000\000\000\000\000\000\026\000\000\000\000\000\000\000o\000\000\000\000\000\000\0009\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\023\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\n\002\000\000\000\000\000\000\325\000\000\000\000\000\000\000h\000\000\000\000\000\000\000\030\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\216\001\000\000\000\000\000\0000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\366\001\000\000\000\000\000\000\306\002\000\000\000\000\000\0007\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000%\000\000\000\000\000\000\000f}\001\000\000\000\000\000\000\'\000\000\000\000\000\000\000\206\001\000\000\000\000\000\000+\001\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000<\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\257\001\000\000\000\000\000\000\004\000\000\000\000\000\000\000T\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\272\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\000\000\000\000\000\000\000s\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\010\004\000\000\000\000\000\000\002\000\000\000\000\000\000\000W\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000N\001\000\000\000\000\000\000N\000\000\000\000\000\000\000S\000\000\000\000\000\000\000p\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\032\000\000\000\000\000\000\0006\000\000\000\000\000\000\000rd\005\000\000\000\000\000\000\t\000\000\000\000\000\000\000\226\000\000\000\000\000\000\000\217\000\000\000\000\000\000\000a\000\000\000\000\000\000\000\325\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nnm\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000l\000\000\000\000\000\000\000^\002\000\000\000\000\000\000\007\000\000\000\000\000\000\000\033\000\000\000\000\000\000\0008\001\000\000\000\000\000\000\034\000\000\000\000\000\000\0003\000\000\000\000\000\000\000\302\000\000\000\000\000\000\000\305\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000j\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\302\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\242\000\000\000\000\000\000\000\'\000\000\000\000\000\000\000z\000\000\000\000\000\000\000\020\001\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000A\000\000\000\000\000\000\000\367\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\227\003\000\000\000\000\000\000\026\n\000\000\000\000\000\000>\001\000\000\000\000\000\000\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000#\000\000\000\000\000\000\000\244\000\000\000\000\000\000\000:\000\000\000\000\000\000\000\256\000\000\000\000\000\000\000\305\000\000\000\000\000\000\000\230\002\000\000\000\000\000\000di\001\000\000\000\000\000\000:\001\000\000\000\000\000\000^\000\000\000\000\000\000\000S\000\000\000\000\000\000\000\nh\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000<\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\277\001\000\000\000\000\000\000\246\000\000\000\000\000\000\000\246\000\000\000\000\000\000\000\ry\000\000\000\000\000\000\000\'\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\226\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000R\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000[\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\207\000\000\000\000\000\000\000<\000\000\000\000\000\000\000}\001\000\000\000\000\000\000>\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000-\000\000\000\000\000\000\000\262\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000s\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000F\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\nr\000\000\000\000\000\000\000q\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000.\004\000\000\000\000\000\000%\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\335\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000O\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\203\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\022\000\000\000\000\000\000\000\266\001\000\000\000\000\000\000dot\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000<\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000i\000\000\000\000\000\000\000\240\005\000\000\000\000\000\000`\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000i\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\032\000\000\000\000\000\000\000\017\000\000\000\000\000\000\0008\000\000\000\000\000\000\000x\000\000\000\000\000\000\000u\000\000\000\000\000\000\000\006\000\000\000\000\000\000\0002\000\000\000\000\000\000\000\302\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\326\002\000\000\000\000\000\000;\000\000\000\000\000\000\000(\000\000\000\000\000\000\000\200\001\000\000\000\000\000\000:\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000z\000\000\000\000\000\000\000y\000\000\000\000\000\000\000\306\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\260\000\000\000\000\000\000\000%\000\000\000\000\000\000\000J\000\000\000\000\000\000\000\nr\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000V\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\016\000\000\000\000\000\000\0005\002\000\000\000\000\000\000\005\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000,\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\\\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000-\000\000\000\000\000\000\000\nr\000\000\000\000\000\000\000^\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\ttcn\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\335\002\000\000\000\000\000\000\365\000\000\000\000\000\000\000i\001\000\000\000\000\000\000\007\000\000\000\000\000\000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000o\004\000\000\000\000\000\000\235\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000J\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000Y\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000U\000\000\000\000\000\000\000V\000\000\000\000\000\000\000\036\000\000\000\000\000\000\000 \001\000\000\000\000\000\000\035\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\234\000\000\000\000\000\000\000\"\000\000\000\000\000\000\000Y\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\035\001\000\000\000\000\000\000\n\001\000\000\000\000\000\000|r\000\000\000\000\000\000\000\346\013\000\000\000\000\000\000\037\000\000\000\000\000\000\000\252\000\000\000\000\000\000\000y\000\000\000\000\000\000\000h\000\000\000\000\000\000\000;\000\000\000\000\000\000\000\204\000\000\000\000\000\000\000?\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\005\002\000\000\000\000\000\000\016\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000X\000\000\000\000\000\000\000\203\000\000\000\000\000\000\000dr\000\000\000\000\000\000\000_\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000>\000\000\000\000\000\000\000\235\000\000\000\000\000\000\000$\000\000\000\000\000\000\000\356\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000f\001\000\000\000\000\000\000r\001\000\000\000\000\000\000\317\001\000\000\000\000\000\000#\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000)\001\000\000\000\000\000\000j\000\000\000\000\000\000\000J\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000X\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000~\001\000\000\000\000\000\000\013\002\000\000\000\000\000\000o\000\000\000\000\000\000\0000\000\000\000\000\000\000\000\320\002\000\000\000\000\000\000%\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\327\000\000\000\000\000\000\000+\000\000\000\000\000\000\000\217\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000\000\000&\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\t{p\000\000\000\000\000\000\000\017\000\000\000\000\000\000\0009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000R\000\000\000\000\000\000\0008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000%\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000R\001\000\000\000\000\000\000\315\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\007\000\000\000\000\000\000\000\263\000\000\000\000\000\000\000\031\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000I\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000in\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\210\000\000\000\000\000\000\0003\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000/\000\000\000\000\000\000\000\232\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\232\000\000\000\000\000\000\000?\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\013\000\000\000\000\000\000\000c\000\000\000\000\000\000\000\271\000\000\000\000\000\000\000\r`\000\000\000\000\000\000\0002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\340\000\000\000\000\000\000\000\251\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000*\000\000\000\000\000\000\000vi\001\000\000\000\000\000\000^\000\000\000\000\000\000\000\rh\n\000\000\000\000\000\000\034\000\000\000\000\000\000\000\347\000\000\000\000\000\000\000\"\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000E\000\000\000\000\000\000\000O\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000xs\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\001\000\000\000\000\000\000\020\000\000\000\000\000\000\000\356\000\000\000\000\000\000\000\312\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\232\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000xe\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\000\000\000\000N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\341\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\000\000\000\000\000\000\003\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\377\377\377\377\377\377\377\377\037\000\000\000\000\000\000\000s\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\332\000\000\000\000\000\000\000A\000\000\000\000\000\000\000%\000\000\000\000\000\000\000\203\000\000\000\000\000\000\000*\000\000\000\000\000\000\000\211\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000J\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\033\000\000\000\000\000\000\000\303\000\000\000\000\000\000\000=\000\000\000\000\000\000\000amk\001\000\000\000\000\000\000\004\000\000\000\000\000\000\000\014\000\000\000\000\000\000\000\r\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\200\000\000\000\000\000\000\000\216\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000u\001\000\000\000\000\000\000\004\000\000\000\000\000\000\000&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\001\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "tensors/component_5"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1192
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1192
          }
        }
        tensor_content
      }
    }
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1000
      }
    }
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 100
      }
    }
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: false
      }
    }
  }
}
node {
  name: "optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "tensors/component_0"
  input: "tensors/component_1"
  input: "tensors/component_2"
  input: "tensors/component_3"
  input: "tensors/component_4"
  input: "tensors/component_5"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "TensorSliceDataset"
  input: "buffer_size"
  input: "seed"
  input: "seed2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "BatchDatasetV2"
  input: "optimizations"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_DOUBLE
        type: DT_DOUBLE
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/Shape"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_comments/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:1"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_DOUBLE
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/Shape"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/average_likes/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:2"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/Shape"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/follower_count/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:3"
  input: "dnn/input_from_feature_columns/input_layer/following_count/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/following_count/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/following_count/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/following_count/Shape"
  input: "dnn/input_from_feature_columns/input_layer/following_count/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/following_count/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/following_count/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/following_count/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/following_count/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/following_count/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/following_count/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/following_count/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:4"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/ToFloat"
  op: "Cast"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/ExpandDims"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/Shape"
  op: "Shape"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/strided_slice/stack"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/strided_slice"
  op: "StridedSlice"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/Shape"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/strided_slice/stack"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/strided_slice/stack_1"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/Reshape/shape/1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/Reshape/shape"
  op: "Pack"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/strided_slice"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/Reshape/shape/1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/media_posts/Reshape"
  op: "Reshape"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/ToFloat"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/input_from_feature_columns/input_layer/concat"
  op: "ConcatV2"
  input: "dnn/input_from_feature_columns/input_layer/average_comments/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/average_likes/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/follower_count/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/following_count/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/media_posts/Reshape"
  input: "dnn/input_from_feature_columns/input_layer/concat/axis"
  attr {
    key: "N"
    value {
      i: 5
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.6324555277824402
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.6324555277824402
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/hiddenlayer_0/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_0/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/hiddenlayer_0/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_0/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/MatMul"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_0/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_0/MatMul"
  input: "dnn/hiddenlayer_0/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_0/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_0/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/Size"
  op: "Size"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction/LessEqual"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/zero_fraction/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction/Size"
  input: "dnn/zero_fraction/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction/counts_to_fraction/Cast"
  input: "dnn/zero_fraction/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction/fraction"
  op: "Identity"
  input: "dnn/zero_fraction/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_0/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_0/activation/tag"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.547722578048706
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/kernel/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/hiddenlayer_1/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/hiddenlayer_1/bias/part_0"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/hiddenlayer_1/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/kernel"
  op: "Identity"
  input: "dnn/hiddenlayer_1/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/bias"
  op: "Identity"
  input: "dnn/hiddenlayer_1/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/BiasAdd"
  op: "BiasAdd"
  input: "dnn/hiddenlayer_1/MatMul"
  input: "dnn/hiddenlayer_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/hiddenlayer_1/Relu"
  op: "Relu"
  input: "dnn/hiddenlayer_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/Size"
  op: "Size"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_1/LessEqual"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_1/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_1/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_1/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/zero_fraction_1/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/Relu"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_1/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_1/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_1/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_1/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_1/Size"
  input: "dnn/zero_fraction_1/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_1/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_1/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_1/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_1/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_1/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/hiddenlayer_1/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/hiddenlayer_1/activation/tag"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.7385489344596863
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7385489344596863
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  op: "Sub"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/max"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  op: "Mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/RandomUniform"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  op: "Add"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/mul"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/kernel/part_0"
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/logits/kernel/part_0/Initializer/random_uniform"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/logits/bias/part_0"
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Assign"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "dnn/logits/bias/part_0/Initializer/zeros"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias/part_0/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/kernel"
  op: "Identity"
  input: "dnn/logits/kernel/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/MatMul"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/logits/bias/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/logits/bias"
  op: "Identity"
  input: "dnn/logits/bias/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/logits/BiasAdd"
  op: "BiasAdd"
  input: "dnn/logits/MatMul"
  input: "dnn/logits/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/zero_fraction_2/Size"
  op: "Size"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 2147483647
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/LessEqual"
  op: "LessEqual"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/LessEqual/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Switch"
  op: "Switch"
  input: "dnn/zero_fraction_2/LessEqual"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_t"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/switch_f"
  op: "Identity"
  input: "dnn/zero_fraction_2/cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/pred_id"
  op: "Identity"
  input: "dnn/zero_fraction_2/LessEqual"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch:1"
  input: "dnn/zero_fraction_2/cond/count_nonzero/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_t"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero/nonzero_count"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  op: "NotEqual"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual/Switch"
  op: "Switch"
  input: "dnn/logits/BiasAdd"
  input: "dnn/zero_fraction_2/cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/BiasAdd"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  op: "Const"
  input: "^dnn/zero_fraction_2/cond/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  op: "Sum"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Cast"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/Const"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/zero_fraction_2/cond/Merge"
  op: "Merge"
  input: "dnn/zero_fraction_2/cond/count_nonzero_1/nonzero_count"
  input: "dnn/zero_fraction_2/cond/Cast"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/sub"
  op: "Sub"
  input: "dnn/zero_fraction_2/Size"
  input: "dnn/zero_fraction_2/cond/Merge"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  op: "Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/sub"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  op: "Cast"
  input: "dnn/zero_fraction_2/Size"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  op: "RealDiv"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast"
  input: "dnn/zero_fraction_2/counts_to_fraction/Cast_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/zero_fraction_2/fraction"
  op: "Identity"
  input: "dnn/zero_fraction_2/counts_to_fraction/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/fraction_of_zero_values"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/fraction_of_zero_values"
  op: "ScalarSummary"
  input: "dnn/dnn/logits/fraction_of_zero_values/tags"
  input: "dnn/zero_fraction_2/fraction"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation/tag"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "dnn/dnn/logits/activation"
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/activation"
  op: "HistogramSummary"
  input: "dnn/dnn/logits/activation/tag"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logits/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/predictions/logistic"
  op: "Sigmoid"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/two_class_logits"
  op: "ConcatV2"
  input: "dnn/head/predictions/zeros_like"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/predictions/two_class_logits/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/probabilities"
  op: "Softmax"
  input: "dnn/head/predictions/two_class_logits"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids/dimension"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/class_ids"
  op: "ArgMax"
  input: "dnn/head/predictions/two_class_logits"
  input: "dnn/head/predictions/class_ids/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/predictions/ExpandDims"
  op: "ExpandDims"
  input: "dnn/head/predictions/class_ids"
  input: "dnn/head/predictions/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/predictions/str_classes"
  op: "AsString"
  input: "dnn/head/predictions/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "fill"
    value {
      s: ""
    }
  }
  attr {
    key: "precision"
    value {
      i: -1
    }
  }
  attr {
    key: "scientific"
    value {
      b: false
    }
  }
  attr {
    key: "shortest"
    value {
      b: false
    }
  }
  attr {
    key: "width"
    value {
      i: -1
    }
  }
}
node {
  name: "dnn/head/labels/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/ExpandDims"
  op: "ExpandDims"
  input: "IteratorGetNext:5"
  input: "dnn/head/labels/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/Shape_1"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/Shape"
  op: "Shape"
  input: "dnn/head/labels/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/labels/assert_rank_at_least/assert_type/statically_determined_correct_type"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  op: "NoOp"
}
node {
  name: "dnn/head/labels/strided_slice/stack"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice/stack_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/strided_slice"
  op: "StridedSlice"
  input: "dnn/head/labels/Shape_1"
  input: "dnn/head/labels/strided_slice/stack"
  input: "dnn/head/labels/strided_slice/stack_1"
  input: "dnn/head/labels/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "dnn/head/labels/concat/values_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat/axis"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/concat"
  op: "ConcatV2"
  input: "dnn/head/labels/strided_slice"
  input: "dnn/head/labels/concat/values_1"
  input: "dnn/head/labels/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Equal"
  op: "Equal"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/All"
  op: "All"
  input: "dnn/head/labels/assert_equal/Equal"
  input: "dnn/head/labels/assert_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Const_1"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "expected_labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  op: "Const"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "labels_shape: "
      }
    }
  }
}
node {
  name: "dnn/head/labels/assert_equal/Assert/Assert"
  op: "Assert"
  input: "dnn/head/labels/assert_equal/All"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_0"
  input: "dnn/head/labels/concat"
  input: "dnn/head/labels/assert_equal/Assert/Assert/data_2"
  input: "dnn/head/labels/Shape"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/labels"
  op: "Identity"
  input: "dnn/head/labels/ExpandDims"
  input: "^dnn/head/labels/assert_equal/Assert/Assert"
  input: "^dnn/head/labels/assert_rank_at_least/static_checks_determined_all_ok"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/ToFloat"
  op: "Cast"
  input: "dnn/head/labels"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must <= n_classes - 1"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must <= n_classes - 1"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  op: "Const"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (dnn/head/assert_range/Const:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/data_3"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert/Switch_2"
  op: "Switch"
  input: "dnn/head/assert_range/Const"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/Const"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/Const"
  input: "dnn/head/ToFloat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  op: "All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/LessEqual"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  op: "NoOp"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/NoOp"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_t"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Labels must >= 0"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x >= 0 did not hold element-wise:"
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  op: "Const"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "x (dnn/head/ToFloat:0) = "
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  op: "Assert"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_0"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/data_2"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_STRING
        type: DT_FLOAT
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch"
  op: "Switch"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/All"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert/Switch_1"
  op: "Switch"
  input: "dnn/head/ToFloat"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/pred_id"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/ToFloat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  op: "Identity"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Assert"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/switch_f"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  op: "Merge"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency_1"
  input: "dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/assert_range/Identity"
  op: "Identity"
  input: "dnn/head/ToFloat"
  input: "^dnn/head/assert_range/assert_less_equal/Assert/AssertGuard/Merge"
  input: "^dnn/head/assert_range/assert_non_negative/assert_less_equal/Assert/AssertGuard/Merge"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/GreaterEqual"
  op: "GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/logistic_loss/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Neg"
  op: "Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/logistic_loss/Neg"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/mul"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/sub"
  op: "Sub"
  input: "dnn/head/logistic_loss/Select"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Exp"
  op: "Exp"
  input: "dnn/head/logistic_loss/Select_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss/Log1p"
  op: "Log1p"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/logistic_loss"
  op: "Add"
  input: "dnn/head/logistic_loss/sub"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/weights/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/values/rank"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  op: "NoOp"
}
node {
  name: "dnn/head/weighted_loss/ToFloat/x"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Mul"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Const"
  op: "Const"
  input: "^dnn/head/weighted_loss/assert_broadcastable/static_scalar_check_success"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/weighted_loss/Sum"
  op: "Sum"
  input: "dnn/head/weighted_loss/Mul"
  input: "dnn/head/weighted_loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/Fill"
  op: "Fill"
  input: "dnn/head/gradients/Shape"
  input: "dnn/head/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/Fill"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  op: "Shape"
  input: "dnn/head/weighted_loss/Mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  op: "Tile"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  input: "dnn/head/weighted_loss/ToFloat/x"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/head/logistic_loss"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/Log1p"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/weighted_loss/Mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss/Select"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/logistic_loss/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/sub_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  op: "Const"
  input: "^dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  op: "Add"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add/x"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  op: "Reciprocal"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  op: "Shape"
  input: "dnn/logits/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  op: "Shape"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  input: "dnn/head/assert_range/Identity"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  op: "Mul"
  input: "dnn/logits/BiasAdd"
  input: "dnn/head/gradients/dnn/head/logistic_loss/sub_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  op: "Sum"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Mul_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  op: "Reshape"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Sum_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  op: "Mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Log1p_grad/mul"
  input: "dnn/head/logistic_loss/Exp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  op: "ZerosLike"
  input: "dnn/head/logistic_loss/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  op: "Select"
  input: "dnn/head/logistic_loss/GreaterEqual"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/zeros_like"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Exp_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
  input: "^dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/Select_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  op: "Neg"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/AddN"
  op: "AddN"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/mul_grad/tuple/control_dependency"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Select_1_grad/tuple/control_dependency_1"
  input: "dnn/head/gradients/dnn/head/logistic_loss/Neg_grad/Neg"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/AddN"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/head/logistic_loss/Select_grad/Select"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/logits/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_1/Relu"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/logits/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/logits/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/hiddenlayer_0/Relu"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  op: "MatMul"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  input: "dnn/hiddenlayer_0/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dnn/input_from_feature_columns/input_layer/concat"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
  input: "^dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/logits/kernel/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/logits/kernel/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1
          }
        }
        float_val: 0.10000000149011612
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "dnn/dnn/logits/bias/part_0/Adagrad"
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/dnn/logits/bias/part_0/Adagrad/Initializer/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/dnn/logits/bias/part_0/Adagrad/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dnn/head/Adagrad/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05000000074505806
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/kernel/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_0/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_0/bias/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/kernel/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/hiddenlayer_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/hiddenlayer_1/bias/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/logits/kernel/part_0"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/kernel/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update_dnn/logits/bias/part_0/ResourceApplyAdagrad"
  op: "ResourceApplyAdagrad"
  input: "dnn/logits/bias/part_0"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "dnn/head/Adagrad/learning_rate"
  input: "dnn/head/gradients/dnn/logits/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dnn/logits/bias/part_0"
      }
    }
  }
  attr {
    key: "update_slots"
    value {
      b: true
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/Adagrad/update"
  op: "NoOp"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/bias/part_0/ResourceApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_0/kernel/part_0/ResourceApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_1/bias/part_0/ResourceApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/hiddenlayer_1/kernel/part_0/ResourceApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/bias/part_0/ResourceApplyAdagrad"
  input: "^dnn/head/Adagrad/update_dnn/logits/kernel/part_0/ResourceApplyAdagrad"
}
node {
  name: "dnn/head/Adagrad/value"
  op: "Const"
  input: "^dnn/head/Adagrad/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "dnn/head/Adagrad"
  op: "AssignAdd"
  input: "global_step"
  input: "dnn/head/Adagrad/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/ones_like/Shape"
  op: "Shape"
  input: "dnn/head/logistic_loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/ones_like/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/ones_like"
  op: "Fill"
  input: "dnn/head/ones_like/Shape"
  input: "dnn/head/ones_like/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dnn/head/mul/x"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "dnn/head/mul"
  op: "Mul"
  input: "dnn/head/mul/x"
  input: "dnn/head/ones_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "dnn/head/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "dnn/head/Sum"
  op: "Sum"
  input: "dnn/head/mul"
  input: "dnn/head/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "dnn/head/truediv"
  op: "RealDiv"
  input: "dnn/head/weighted_loss/Sum"
  input: "dnn/head/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "dnn/head/weighted_loss/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "average_loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "average_loss"
      }
    }
  }
}
node {
  name: "average_loss"
  op: "ScalarSummary"
  input: "average_loss/tags"
  input: "dnn/head/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/bias/part_0/Adagrad/Assign"
  input: "^dnn/dnn/logits/kernel/part_0/Adagrad/Assign"
  input: "^dnn/hiddenlayer_0/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_0/kernel/part_0/Assign"
  input: "^dnn/hiddenlayer_1/bias/part_0/Assign"
  input: "^dnn/hiddenlayer_1/kernel/part_0/Assign"
  input: "^dnn/logits/bias/part_0/Assign"
  input: "^dnn/logits/kernel/part_0/Assign"
  input: "^global_step/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 13
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 13
          }
        }
        string_val: "global_step"
        string_val: "dnn/hiddenlayer_0/kernel/part_0"
        string_val: "dnn/hiddenlayer_0/bias/part_0"
        string_val: "dnn/hiddenlayer_1/kernel/part_0"
        string_val: "dnn/hiddenlayer_1/bias/part_0"
        string_val: "dnn/logits/kernel/part_0"
        string_val: "dnn/logits/bias/part_0"
        string_val: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
        string_val: "dnn/dnn/logits/kernel/part_0/Adagrad"
        string_val: "dnn/dnn/logits/bias/part_0/Adagrad"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 13
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 13
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "init_3"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "dnn/dnn/hiddenlayer_0/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_0/activation"
  input: "dnn/dnn/hiddenlayer_1/fraction_of_zero_values"
  input: "dnn/dnn/hiddenlayer_1/activation"
  input: "dnn/dnn/logits/fraction_of_zero_values"
  input: "dnn/dnn/logits/activation"
  input: "loss"
  input: "average_loss"
  attr {
    key: "N"
    value {
      i: 8
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Read/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/Identity"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_1/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/Read_1/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/Identity_2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_2/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/Read_2/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/Identity_4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_3/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/Read_3/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/Identity_6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_4/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/Read_4/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/Identity_8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_5/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/Read_5/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/Identity_10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_6/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/Read_6/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/Identity_12"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_7/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/Read_7/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/Identity_14"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_8/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/Read_8/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/Identity_16"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_9/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/Read_9/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/Identity_18"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_10/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/Read_10/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/Identity_20"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_11/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_22"
  op: "Identity"
  input: "save/Read_11/ReadVariableOp"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_23"
  op: "Identity"
  input: "save/Identity_22"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_6553b2906ffb4318baf510a1996c9170/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "global_step"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename_1"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename_1/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Read_12/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_24"
  op: "Identity"
  input: "save/Read_12/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_25"
  op: "Identity"
  input: "save/Identity_24"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_13/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_26"
  op: "Identity"
  input: "save/Read_13/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_27"
  op: "Identity"
  input: "save/Identity_26"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_14/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_28"
  op: "Identity"
  input: "save/Read_14/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_29"
  op: "Identity"
  input: "save/Identity_28"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_15/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_30"
  op: "Identity"
  input: "save/Read_15/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_31"
  op: "Identity"
  input: "save/Identity_30"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_16/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_32"
  op: "Identity"
  input: "save/Read_16/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_33"
  op: "Identity"
  input: "save/Identity_32"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_17/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_34"
  op: "Identity"
  input: "save/Read_17/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_35"
  op: "Identity"
  input: "save/Identity_34"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_18/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_36"
  op: "Identity"
  input: "save/Read_18/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_37"
  op: "Identity"
  input: "save/Identity_36"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_19/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_38"
  op: "Identity"
  input: "save/Read_19/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_39"
  op: "Identity"
  input: "save/Identity_38"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_20/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/bias/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_40"
  op: "Identity"
  input: "save/Read_20/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_41"
  op: "Identity"
  input: "save/Identity_40"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_21/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_42"
  op: "Identity"
  input: "save/Read_21/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_43"
  op: "Identity"
  input: "save/Identity_42"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_22/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/logits/kernel/part_0"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_44"
  op: "Identity"
  input: "save/Read_22/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_45"
  op: "Identity"
  input: "save/Identity_44"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Read_23/ReadVariableOp"
  op: "ReadVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_46"
  op: "Identity"
  input: "save/Read_23/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/Identity_47"
  op: "Identity"
  input: "save/Identity_46"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/SaveV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 12
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/SaveV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 12
          }
        }
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "5 10 0,5:0,10"
        string_val: "5 10 0,5:0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "10 1 0,10:0,1"
        string_val: "10 1 0,10:0,1"
      }
    }
  }
}
node {
  name: "save/SaveV2_1"
  op: "SaveV2"
  input: "save/ShardedFilename_1"
  input: "save/SaveV2_1/tensor_names"
  input: "save/SaveV2_1/shape_and_slices"
  input: "save/Identity_25"
  input: "save/Identity_27"
  input: "save/Identity_29"
  input: "save/Identity_31"
  input: "save/Identity_33"
  input: "save/Identity_35"
  input: "save/Identity_37"
  input: "save/Identity_39"
  input: "save/Identity_41"
  input: "save/Identity_43"
  input: "save/Identity_45"
  input: "save/Identity_47"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency_1"
  op: "Identity"
  input: "save/ShardedFilename_1"
  input: "^save/SaveV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "save/ShardedFilename_1"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity_48"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  input: "^save/control_dependency_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 12
          }
        }
        string_val: "dnn/hiddenlayer_0/bias"
        string_val: "dnn/hiddenlayer_0/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_0/kernel"
        string_val: "dnn/hiddenlayer_0/kernel/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/bias"
        string_val: "dnn/hiddenlayer_1/bias/t_0/Adagrad"
        string_val: "dnn/hiddenlayer_1/kernel"
        string_val: "dnn/hiddenlayer_1/kernel/t_0/Adagrad"
        string_val: "dnn/logits/bias"
        string_val: "dnn/logits/bias/t_0/Adagrad"
        string_val: "dnn/logits/kernel"
        string_val: "dnn/logits/kernel/t_0/Adagrad"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 12
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 12
          }
        }
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "5 10 0,5:0,10"
        string_val: "5 10 0,5:0,10"
        string_val: "10 0,10"
        string_val: "10 0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "10 10 0,10:0,10"
        string_val: "1 0,1"
        string_val: "1 0,1"
        string_val: "10 1 0,10:0,1"
        string_val: "10 1 0,10:0,1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Identity_49"
  op: "Identity"
  input: "save/RestoreV2_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/bias/part_0"
  input: "save/Identity_49"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_50"
  op: "Identity"
  input: "save/RestoreV2_1:1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/bias/part_0/Adagrad"
  input: "save/Identity_50"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_51"
  op: "Identity"
  input: "save/RestoreV2_1:2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_0/kernel/part_0"
  input: "save/Identity_51"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_52"
  op: "Identity"
  input: "save/RestoreV2_1:3"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_0/kernel/part_0/Adagrad"
  input: "save/Identity_52"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_53"
  op: "Identity"
  input: "save/RestoreV2_1:4"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/bias/part_0"
  input: "save/Identity_53"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_54"
  op: "Identity"
  input: "save/RestoreV2_1:5"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/bias/part_0/Adagrad"
  input: "save/Identity_54"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_55"
  op: "Identity"
  input: "save/RestoreV2_1:6"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "dnn/hiddenlayer_1/kernel/part_0"
  input: "save/Identity_55"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_56"
  op: "Identity"
  input: "save/RestoreV2_1:7"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "dnn/dnn/hiddenlayer_1/kernel/part_0/Adagrad"
  input: "save/Identity_56"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_57"
  op: "Identity"
  input: "save/RestoreV2_1:8"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "dnn/logits/bias/part_0"
  input: "save/Identity_57"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_58"
  op: "Identity"
  input: "save/RestoreV2_1:9"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/bias/part_0/Adagrad"
  input: "save/Identity_58"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_59"
  op: "Identity"
  input: "save/RestoreV2_1:10"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "dnn/logits/kernel/part_0"
  input: "save/Identity_59"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/Identity_60"
  op: "Identity"
  input: "save/RestoreV2_1:11"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "dnn/dnn/logits/kernel/part_0/Adagrad"
  input: "save/Identity_60"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/restore_shard_1"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all/NoOp"
  op: "NoOp"
  input: "^save/restore_shard"
}
node {
  name: "save/restore_all/NoOp_1"
  op: "NoOp"
  input: "^save/restore_shard_1"
  device: "/device:CPU:0"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_all/NoOp"
  input: "^save/restore_all/NoOp_1"
}
versions {
  producer: 27
}
